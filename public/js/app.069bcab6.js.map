{"version":3,"file":"js/app.069bcab6.js","mappings":"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","sources":["webpack://java-speicherverwaltung/./src/App.vue","webpack://java-speicherverwaltung/./src/App.vue?7ccd","webpack://java-speicherverwaltung/./src/components/MainLayout.vue","webpack://java-speicherverwaltung/./src/components/CodeExplorer.vue","webpack://java-speicherverwaltung/./src/store/memory.js","webpack://java-speicherverwaltung/./src/components/CodeExplorer.vue?8ada","webpack://java-speicherverwaltung/./src/components/MemoryVisualizer.vue","webpack://java-speicherverwaltung/./src/components/MemoryVisualizer.vue?5c04","webpack://java-speicherverwaltung/./src/components/MainLayout.vue?71ff","webpack://java-speicherverwaltung/./src/components/WelcomePage.vue","webpack://java-speicherverwaltung/./src/components/WelcomePage.vue?dfac","webpack://java-speicherverwaltung/./src/components/TheoryCards.vue","webpack://java-speicherverwaltung/./src/components/TheoryCards.vue?9458","webpack://java-speicherverwaltung/./src/components/QuizPage.vue","webpack://java-speicherverwaltung/./src/components/QuizPage.vue?bf7b","webpack://java-speicherverwaltung/./src/components/theory/CallStackTheory.vue","webpack://java-speicherverwaltung/./src/components/theory/TheoryLayout.vue","webpack://java-speicherverwaltung/./src/components/theory/TheoryLayout.vue?f842","webpack://java-speicherverwaltung/./src/components/theory/CallStackTheory.vue?2893","webpack://java-speicherverwaltung/./src/components/theory/MemoryStackTheory.vue","webpack://java-speicherverwaltung/./src/components/theory/MemoryStackTheory.vue?01de","webpack://java-speicherverwaltung/./src/components/theory/MemoryHeapTheory.vue","webpack://java-speicherverwaltung/./src/components/theory/MemoryHeapTheory.vue?57ee","webpack://java-speicherverwaltung/./src/components/theory/MethodAreaTheory.vue","webpack://java-speicherverwaltung/./src/components/theory/MethodAreaTheory.vue?c150","webpack://java-speicherverwaltung/./src/components/theory/StackPointerTheory.vue","webpack://java-speicherverwaltung/./src/components/theory/StackPointerTheory.vue?a304","webpack://java-speicherverwaltung/./src/components/theory/InstructionPointerTheory.vue","webpack://java-speicherverwaltung/./src/components/theory/InstructionPointerTheory.vue?2cac","webpack://java-speicherverwaltung/./src/router/index.js","webpack://java-speicherverwaltung/./src/main.js","webpack://java-speicherverwaltung/webpack/bootstrap","webpack://java-speicherverwaltung/webpack/runtime/chunk loaded","webpack://java-speicherverwaltung/webpack/runtime/compat get default export","webpack://java-speicherverwaltung/webpack/runtime/define property getters","webpack://java-speicherverwaltung/webpack/runtime/global","webpack://java-speicherverwaltung/webpack/runtime/hasOwnProperty shorthand","webpack://java-speicherverwaltung/webpack/runtime/jsonp chunk loading","webpack://java-speicherverwaltung/webpack/startup"],"sourcesContent":["<template>\r\n  <div class=\"app-container\">\r\n    <header class=\"app-header\">\r\n      <div class=\"container\">\r\n        <h1 class=\"app-title\">Java Speicherverwaltung</h1>\r\n        <p class=\"app-subtitle\">Interaktive Visualisierung der Java-Speicherkonzepte</p>\r\n      </div>\r\n    </header>\r\n    \r\n    <nav class=\"main-nav\">\r\n      <div class=\"container nav-container\">\r\n        <!-- Neuer Home-Button für die WelcomePage -->\r\n        <router-link to=\"/\" class=\"nav-item\" exact-active-class=\"active\">\r\n          <div class=\"nav-icon\">\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" width=\"24\" height=\"24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\r\n              <path d=\"M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z\"></path>\r\n              <polyline points=\"9 22 9 12 15 12 15 22\"></polyline>\r\n            </svg>\r\n          </div>\r\n          <span>Home</span>\r\n        </router-link>\r\n        \r\n        <!-- Der bisherige Visualizer-Link - jetzt auf /visualizer -->\r\n        <router-link to=\"/visualizer\" class=\"nav-item\" active-class=\"active\">\r\n          <div class=\"nav-icon\">\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" width=\"24\" height=\"24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\r\n              <rect x=\"2\" y=\"3\" width=\"20\" height=\"14\" rx=\"2\" ry=\"2\"></rect>\r\n              <line x1=\"8\" y1=\"21\" x2=\"16\" y2=\"21\"></line>\r\n              <line x1=\"12\" y1=\"17\" x2=\"12\" y2=\"21\"></line>\r\n            </svg>\r\n          </div>\r\n          <span>Visualisierung</span>\r\n        </router-link>\r\n        \r\n        <router-link to=\"/theory\" class=\"nav-item\" active-class=\"active\">\r\n          <div class=\"nav-icon\">\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" width=\"24\" height=\"24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\r\n              <path d=\"M2 3h6a4 4 0 0 1 4 4v14a3 3 0 0 0-3-3H2z\"></path>\r\n              <path d=\"M22 3h-6a4 4 0 0 0-4 4v14a3 3 0 0 1 3-3h7z\"></path>\r\n            </svg>\r\n          </div>\r\n          <span>Theory & Concepts</span>\r\n        </router-link>\r\n        \r\n        <router-link to=\"/quiz\" class=\"nav-item\" active-class=\"active\">\r\n          <div class=\"nav-icon\">\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" width=\"24\" height=\"24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\r\n              <circle cx=\"12\" cy=\"12\" r=\"10\"></circle>\r\n              <line x1=\"12\" y1=\"16\" x2=\"12\" y2=\"12\"></line>\r\n              <line x1=\"12\" y1=\"8\" x2=\"12\" y2=\"8\"></line>\r\n            </svg>\r\n          </div>\r\n          <span>Quiz</span>\r\n        </router-link>\r\n      </div>\r\n    </nav>\r\n    \r\n    <main class=\"main-content\">\r\n      <div class=\"container\">\r\n        <router-view></router-view>\r\n      </div>\r\n    </main>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n  export default {\r\n  name: 'App'\r\n}\r\n</script>\r\n\r\n<style>\r\n/* Global Styles */\r\n:root {\r\n  --primary-color: #4361ee;\r\n  --primary-light: #f0f4ff;\r\n  --text-primary: #1e293b;\r\n  --text-secondary: #64748b;\r\n  --bg-light: #f8f9fa;\r\n  --border-color: #e2e8f0;\r\n}\r\n\r\n* {\r\n  box-sizing: border-box;\r\n  margin: 0;\r\n  padding: 0;\r\n}\r\n\r\nbody {\r\n  font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\r\n  line-height: 1.6;\r\n  color: var(--text-primary);\r\n  background-color: #f0f2f5;\r\n}\r\n\r\n.container {\r\n  width: 100%;\r\n  max-width: 1200px;\r\n  margin: 0 auto;\r\n  padding: 0 1rem;\r\n}\r\n\r\n/* Header Styles */\r\n.app-header {\r\n  background-color: white;\r\n  padding: 1.0rem 1.5rem;\r\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);\r\n  text-align: center;\r\n}\r\n\r\n.app-title {\r\n  font-size: 2.5rem;\r\n  font-weight: 700;\r\n  color: var(--text-primary);\r\n  background: linear-gradient(to right, #4361ee, #4895ef);\r\n  background-clip: text;          /* Standard-Eigenschaft hinzufügen */\r\n  -webkit-background-clip: text;  /* Für ältere Browser beibehalten */\r\n  -text-fill-color: transparent;   /* Standard-Eigenschaft (zukünftig) */\r\n  -webkit-text-fill-color: transparent;\r\n}\r\n\r\n.app-subtitle {\r\n  font-size: 1.15rem;\r\n  color: var(--text-secondary);\r\n}\r\n\r\n/* Navigation Styles */\r\n.main-nav {\r\n  background-color: white;\r\n  padding: 0.75rem 0;\r\n  box-shadow: 0 1px 0 rgba(0, 0, 0, 0.05);\r\n  position: sticky;\r\n  top: 0;\r\n  z-index: 100;\r\n}\r\n\r\n.nav-container {\r\n  display: flex;\r\n  justify-content: center;\r\n  gap: 1rem;\r\n}\r\n\r\n.nav-item {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  text-decoration: none;\r\n  color: var(--text-secondary);\r\n  padding: 0.75rem 2rem;\r\n  border-radius: 0.5rem;\r\n  transition: all 0.2s ease;\r\n  font-size: 0.95rem;\r\n  font-weight: 500;\r\n}\r\n\r\n.nav-icon {\r\n  margin-bottom: 0.5rem;\r\n  color: var(--text-secondary);\r\n  transition: color 0.2s ease;\r\n}\r\n\r\n.nav-item:hover {\r\n  background-color: rgba(243, 244, 246, 0.8);\r\n  color: var(--text-primary);\r\n}\r\n\r\n.nav-item:hover .nav-icon {\r\n  color: var(--primary-color);\r\n}\r\n\r\n.nav-item.active {\r\n  background-color: var(--primary-light);\r\n  color: var(--primary-color);\r\n  font-weight: 600;\r\n}\r\n\r\n.nav-item.active .nav-icon {\r\n  color: var(--primary-color);\r\n}\r\n\r\n/* Main Content */\r\n.main-content {\r\n  padding: 2rem 0 4rem;\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .app-title {\r\n    font-size: 2rem;\r\n  }\r\n  \r\n  .app-subtitle {\r\n    font-size: 1rem;\r\n  }\r\n  \r\n  .nav-container {\r\n    gap: 0.5rem;\r\n  }\r\n  \r\n  .nav-item {\r\n    padding: 0.75rem 1.25rem;\r\n    font-size: 0.8rem;\r\n  }\r\n}\r\n\r\n@media (max-width: 640px) {\r\n  .nav-container {\r\n    justify-content: space-between;\r\n  }\r\n  \r\n  .nav-item {\r\n    padding: 0.75rem 0.5rem;\r\n  }\r\n}\r\n</style>","import { render } from \"./App.vue?vue&type=template&id=7f821438\"\nimport script from \"./App.vue?vue&type=script&lang=js\"\nexport * from \"./App.vue?vue&type=script&lang=js\"\n\nimport \"./App.vue?vue&type=style&index=0&id=7f821438&lang=css\"\n\nimport exportComponent from \"../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\r\n    <div class=\"visualizer-container\">\r\n      <div class=\"visualizer-grid\">\r\n        <div class=\"left-panel\">\r\n          <CodeExplorer />\r\n        </div>\r\n        <div class=\"right-panel\">\r\n          <MemoryVisualizer />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </template>\r\n    \r\n  <script>\r\n  import CodeExplorer from './CodeExplorer.vue'\r\n  import MemoryVisualizer from './MemoryVisualizer.vue'\r\n  \r\n  export default {\r\n    name: 'MainLayout',\r\n    components: {\r\n      CodeExplorer,\r\n      MemoryVisualizer\r\n    }\r\n  }\r\n  </script>\r\n  \r\n  <style scoped>\r\n  .visualizer-container {\r\n    width: 100%;\r\n  }\r\n  \r\n  .visualizer-grid {\r\n    display: flex;\r\n    gap: 2rem;\r\n    margin-top: 0.5rem;\r\n  }\r\n  \r\n  .left-panel, .right-panel {\r\n    flex: 1;\r\n    min-width: 300px;\r\n  }\r\n  \r\n  @media (max-width: 768px) {\r\n    .visualizer-grid {\r\n      flex-direction: column;\r\n    }\r\n  }\r\n  </style>","<template>\r\n    <div class=\"code-explorer\">\r\n      <h2>Java Code</h2>\r\n      <div class=\"code-container\">\r\n        <div \r\n          v-for=\"(line, index) in codeLines\" \r\n          :key=\"index\"\r\n          :class=\"['code-line', { 'active-line': store.currentLine === index }]\"\r\n        >\r\n          <!-- Instruction Pointer Pfeil -->\r\n          <div \r\n            v-if=\"store.nextLineToExecute === index\" \r\n            class=\"instruction-pointer-arrow\"\r\n          >\r\n            ▶\r\n          </div>\r\n          <div v-else class=\"line-spacer\"></div>\r\n          \r\n          <span class=\"line-number\">{{ index + 1 }}</span>\r\n          <span class=\"line-content\">{{ line }}</span>\r\n        </div>\r\n      </div>\r\n      <div class=\"controls\">\r\n        <button @click=\"previousLine\" class=\"btn btn-secondary\" :disabled=\"!store.canGoBack\">\r\n          <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\r\n            <polyline points=\"15 18 9 12 15 6\"></polyline>\r\n          </svg>\r\n          Previous Step\r\n        </button>\r\n        <button @click=\"nextLine\" class=\"btn\">\r\n          Next Step\r\n          <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\r\n            <polyline points=\"9 18 15 12 9 6\"></polyline>\r\n          </svg>\r\n        </button>\r\n        <button @click=\"reset\" class=\"btn btn-reset\">Reset</button>\r\n      </div>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  import { useMemoryStore } from '../store/memory'\r\n  import { computed, onMounted } from 'vue'\r\n  \r\n  export default {\r\n    name: 'CodeExplorer',\r\n    emits: ['next-step', 'prev-step', 'reset'],\r\n    setup(props, { emit }) {\r\n      const store = useMemoryStore()\r\n      \r\n      const codeLines = computed(() => store.currentCode.split('\\n'))\r\n      \r\n      const nextLine = () => {\r\n        const moved = store.nextLine()\r\n        if (moved) {\r\n          emit('next-step')\r\n        }\r\n      }\r\n  \r\n      const previousLine = () => {\r\n        const moved = store.previousLine()\r\n        if (moved) {\r\n          emit('prev-step')\r\n        }\r\n      }\r\n      \r\n      const reset = () => {\r\n        store.reset()\r\n        emit('reset')\r\n      }\r\n      \r\n      // Initialisieren\r\n      onMounted(() => {\r\n        store.reset() // Stellen wir sicher, dass wir mit einem sauberen Zustand starten\r\n      })\r\n      \r\n      return {\r\n        store,\r\n        codeLines,\r\n        nextLine,\r\n        previousLine,\r\n        reset\r\n      }\r\n    }\r\n  }\r\n  </script>\r\n  \r\n  <style scoped>\r\n  .code-explorer {\r\n    border: 1px solid #ddd;\r\n    border-radius: 5px;\r\n    padding: 15px;\r\n    background-color: white;\r\n  }\r\n  \r\n  .code-container {\r\n    background-color: #f5f5f5;\r\n    padding: 10px;\r\n    border-radius: 4px;\r\n    font-family: monospace;\r\n    margin-bottom: 15px;\r\n    max-height: 400px;\r\n    overflow-y: auto;\r\n  }\r\n  \r\n  .code-line {\r\n    padding: 2px 5px;\r\n    display: flex;\r\n    align-items: center;\r\n  }\r\n  \r\n  .active-line {\r\n    background-color: #ffff99;\r\n    font-weight: bold;\r\n  }\r\n  \r\n  /* Styles für den Instruction Pointer Pfeil */\r\n.instruction-pointer-arrow {\r\n  color: #22cfff;\r\n  font-weight: bold;\r\n  width: 20px;\r\n  display: flex;\r\n  justify-content: center;\r\n  animation: blink 1.5s infinite;\r\n  font-size: 14px;\r\n  position: relative;\r\n  cursor: help;\r\n}\r\n  \r\n  .line-spacer {\r\n    width: 20px; /* Gleiche Breite wie der Pfeil für konsistentes Layout */\r\n  }\r\n  \r\n  /* Animation für den blinkenden Pfeil */\r\n  @keyframes blink {\r\n    0% { opacity: 0.8; }\r\n    50% { opacity: 1; transform: scale(1.05); }\r\n    100% { opacity: 0.8; }\r\n  }\r\n  \r\n  .line-number {\r\n    color: #999;\r\n    text-align: right;\r\n    padding-right: 10px;\r\n    user-select: none;\r\n    min-width: 30px;\r\n  }\r\n  \r\n  .controls {\r\n    display: flex;\r\n    gap: 10px;\r\n    justify-content: space-between;\r\n  }\r\n  \r\n  .btn {\r\n    padding: 8px 16px;\r\n    background-color: #0550ae;\r\n    color: white;\r\n    border: none;\r\n    border-radius: 4px;\r\n    cursor: pointer;\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 5px;\r\n  }\r\n  \r\n  .btn:hover {\r\n    background-color: #0550ae;\r\n  }\r\n  \r\n  .btn-secondary {\r\n    background-color: #2196F3;\r\n  }\r\n  \r\n  .btn-secondary:hover {\r\n    background-color: #0b7dda;\r\n  }\r\n  \r\n  .btn-secondary:disabled {\r\n    background-color: #cccccc;\r\n    cursor: not-allowed;\r\n  }\r\n  \r\n  .btn-reset {\r\n    background-color: #f44336;\r\n  }\r\n  \r\n  .btn-reset:hover {\r\n    background-color: #d32f2f;\r\n  }\r\n  </style>","import { defineStore } from 'pinia'\r\n\r\nexport const useMemoryStore = defineStore('memory', {\r\n  state: () => ({\r\n    currentLine: 0,          // Die zuletzt ausgeführte Zeile\r\n    nextLineToExecute: 1,    // Die nächste auszuführende Zeile (= instructionPointer)\r\n    stackVariables: [],\r\n    heapObjects: [],\r\n    stackPointer: -1,\r\n    history: [],\r\n    canGoBack: false,\r\n    programCompleted: false, // Neuer Status für Programmende\r\n    currentCode: `public class Example {\r\n    public static void main(String[] args) {\r\n        int x = 5;\r\n        String message = \"Hello\";\r\n        System.out.println(message + \" World!\");\r\n    }\r\n}`\r\n  }),\r\n  \r\n  actions: {\r\n    saveState() {\r\n      this.history.push({\r\n        currentLine: this.currentLine,\r\n        nextLineToExecute: this.nextLineToExecute,\r\n        stackVariables: JSON.parse(JSON.stringify(this.stackVariables || [])),\r\n        heapObjects: JSON.parse(JSON.stringify(this.heapObjects || [])),\r\n        stackPointer: this.stackPointer,\r\n        programCompleted: this.programCompleted\r\n      });\r\n      this.canGoBack = true;\r\n    },\r\n\r\n    nextLine() {\r\n      // Zustand speichern\r\n      this.saveState();\r\n      \r\n      const maxLines = this.currentCode.split('\\n').length;\r\n      \r\n      // Wenn wir eine nächste Zeile haben\r\n      if (!this.programCompleted && this.nextLineToExecute < maxLines) {\r\n        // Die aktuelle Zeile ist die, die wir jetzt ausführen\r\n        this.currentLine = this.nextLineToExecute;\r\n        \r\n        // Vorbereitung für die nächste auszuführende Zeile\r\n        if (this.currentLine < maxLines - 1) {\r\n          this.nextLineToExecute = this.currentLine + 1;\r\n        } else {\r\n          // Programmende erreicht\r\n          this.programCompleted = true;\r\n        }\r\n        \r\n        // Speicheränderungen\r\n        if (this.currentLine === 2) {\r\n          this.stackVariables.push({ name: 'x', value: 5, address: '0x001', type: 'int' });\r\n          this.stackPointer = 0;\r\n        }\r\n        else if (this.currentLine === 3) {\r\n          this.stackVariables.push({ name: 'message', value: '@0x123', address: '0x002', type: 'String' });\r\n          this.heapObjects.push({ id: '0x123', type: 'String', content: 'Hello', size: 5 });\r\n          this.stackPointer = 1;\r\n        }\r\n        \r\n        return true;\r\n      }\r\n      \r\n      return false;\r\n    },\r\n    \r\n    previousLine() {\r\n      if (this.history && this.history.length > 0) {\r\n        const prevState = this.history.pop();\r\n        \r\n        this.currentLine = prevState.currentLine;\r\n        this.nextLineToExecute = prevState.nextLineToExecute;\r\n        this.stackVariables = prevState.stackVariables;\r\n        this.heapObjects = prevState.heapObjects;\r\n        this.stackPointer = prevState.stackPointer;\r\n        this.programCompleted = prevState.programCompleted;\r\n        \r\n        this.canGoBack = this.history.length > 0;\r\n        return true;\r\n      }\r\n      \r\n      this.canGoBack = false;\r\n      return false;\r\n    },\r\n    \r\n    reset() {\r\n      this.currentLine = 0;       // Keine Zeile wurde noch ausgeführt\r\n      this.nextLineToExecute = 1; // Die erste Zeile wird als nächstes ausgeführt\r\n      this.stackPointer = -1;\r\n      this.stackVariables = [];\r\n      this.heapObjects = [];\r\n      this.history = [];\r\n      this.canGoBack = false;\r\n      this.programCompleted = false;\r\n    }\r\n  }\r\n})","import { render } from \"./CodeExplorer.vue?vue&type=template&id=db0b5e8c&scoped=true\"\nimport script from \"./CodeExplorer.vue?vue&type=script&lang=js\"\nexport * from \"./CodeExplorer.vue?vue&type=script&lang=js\"\n\nimport \"./CodeExplorer.vue?vue&type=style&index=0&id=db0b5e8c&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-db0b5e8c\"]])\n\nexport default __exports__","<template>\r\n    <div class=\"memory-visualizer\">\r\n      <h2>Speichervisualisierung</h2>\r\n      \r\n      <div class=\"memory-sections\">\r\n        <div class=\"memory-section\">\r\n          <h3>Stack</h3>\r\n          <div class=\"stack-area\">\r\n            <div \r\n              v-for=\"(variable, index) in store.stackVariables\" \r\n              :key=\"index\"\r\n              :class=\"['stack-frame', { 'active-frame': store.stackPointer === index }]\"\r\n            >\r\n              <div class=\"stack-var-name\">{{ variable.name }}</div>\r\n              <div class=\"stack-var-value\">\r\n                <span v-if=\"variable.type !== 'String'\">{{ variable.value }}</span>\r\n                <span v-else class=\"reference\">{{ variable.value }}</span>\r\n              </div>\r\n              <div class=\"stack-var-type\">{{ variable.type }}</div>\r\n              <div class=\"stack-var-address\">{{ variable.address }}</div>\r\n            </div>\r\n            <div v-if=\"store.stackVariables.length === 0\" class=\"empty-message\">\r\n              Stack ist leer\r\n            </div>\r\n          </div>\r\n        </div>\r\n        \r\n        <div class=\"memory-section\">\r\n          <h3>Heap</h3>\r\n          <div class=\"heap-area\">\r\n            <div \r\n              v-for=\"object in store.heapObjects\" \r\n              :key=\"object.id\"\r\n              class=\"heap-object\"\r\n            >\r\n              <div class=\"object-header\">{{ object.type }} ({{ object.id }})</div>\r\n              <div class=\"object-content\">\"{{ object.content }}\"</div>\r\n              <div class=\"object-size\">Size: {{ object.size }} bytes</div>\r\n            </div>\r\n            <div v-if=\"store.heapObjects.length === 0\" class=\"empty-message\">\r\n              Heap ist leer\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n      <div class=\"pointers\">\r\n        <div class=\"pointer\">\r\n          <span class=\"pointer-label\">Instruction Pointer (IP):</span>\r\n          <span class=\"pointer-value\"> {{ store.programCompleted ? 'Programm beendet' : 'Line ' + (store.nextLineToExecute + 1) }}</span>\r\n        </div>\r\n        <div class=\"pointer\">\r\n          <span class=\"pointer-label\">Stack Pointer (SP):</span>\r\n          <span class=\"pointer-value\">\r\n            {{ store.stackPointer >= 0 ? `Variable ${store.stackVariables[store.stackPointer]?.name}` : 'None' }}\r\n          </span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  import { useMemoryStore } from '../store/memory'\r\n  \r\n  export default {\r\n    name: 'MemoryVisualizer',\r\n    setup() {\r\n      const store = useMemoryStore()\r\n      return { store }\r\n    }\r\n  }\r\n  </script>\r\n  \r\n  <style scoped>\r\n  .memory-visualizer {\r\n    border: 1px solid #ddd;\r\n    border-radius: 5px;\r\n    padding: 15px;\r\n    background-color: white;\r\n  }\r\n  \r\n  .memory-sections {\r\n    display: flex;\r\n    gap: 20px;\r\n    margin-bottom: 20px;\r\n  }\r\n  \r\n  .memory-section {\r\n    flex: 1;\r\n    background-color: #f5f5f5;\r\n    border-radius: 5px;\r\n    padding: 10px;\r\n  }\r\n  \r\n  .stack-area, .heap-area {\r\n    min-height: 200px;\r\n  }\r\n  \r\n  .stack-frame {\r\n    background-color: white;\r\n    border: 1px solid #ddd;\r\n    margin-bottom: 10px;\r\n    padding: 10px;\r\n    border-radius: 4px;\r\n    display: grid;\r\n    grid-template-columns: 1fr 1fr;\r\n    grid-gap: 5px;\r\n  }\r\n  \r\n  .active-frame {\r\n    border: 2px solid #4CAF50;\r\n    background-color: #e8f5e9;\r\n  }\r\n  \r\n  .stack-var-name, .stack-var-type {\r\n    font-weight: bold;\r\n  }\r\n  \r\n  .stack-var-address {\r\n    color: #666;\r\n    font-size: 0.9em;\r\n  }\r\n  \r\n  .reference {\r\n    color: #e83e8c;\r\n    font-weight: bold;\r\n  }\r\n  \r\n  .heap-object {\r\n    background-color: white;\r\n    border: 1px solid #ddd;\r\n    margin-bottom: 10px;\r\n    padding: 10px;\r\n    border-radius: 4px;\r\n  }\r\n  \r\n  .object-header {\r\n    font-weight: bold;\r\n    color: #0066cc;\r\n    margin-bottom: 5px;\r\n  }\r\n  \r\n  .object-size {\r\n    font-size: 0.9em;\r\n    color: #666;\r\n  }\r\n  \r\n  .pointers {\r\n    background-color: #f5f5f5;\r\n    padding: 10px;\r\n    border-radius: 4px;\r\n  }\r\n  \r\n  .pointer {\r\n    margin-bottom: 5px;\r\n  }\r\n  \r\n  .pointer-label {\r\n    font-weight: bold;\r\n    margin-right: 10px;\r\n  }\r\n  \r\n  .empty-message {\r\n    color: #999;\r\n    text-align: center;\r\n    padding: 20px;\r\n  }\r\n  </style>","import { render } from \"./MemoryVisualizer.vue?vue&type=template&id=530ce7b4&scoped=true\"\nimport script from \"./MemoryVisualizer.vue?vue&type=script&lang=js\"\nexport * from \"./MemoryVisualizer.vue?vue&type=script&lang=js\"\n\nimport \"./MemoryVisualizer.vue?vue&type=style&index=0&id=530ce7b4&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-530ce7b4\"]])\n\nexport default __exports__","import { render } from \"./MainLayout.vue?vue&type=template&id=5e242d61&scoped=true\"\nimport script from \"./MainLayout.vue?vue&type=script&lang=js\"\nexport * from \"./MainLayout.vue?vue&type=script&lang=js\"\n\nimport \"./MainLayout.vue?vue&type=style&index=0&id=5e242d61&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-5e242d61\"]])\n\nexport default __exports__","<template>\r\n  <div class=\"welcome-container\">\r\n    <div class=\"welcome-header\">\r\n      <h1>Willkommen zur Java Speicherverwaltung</h1>\r\n      <p class=\"subtitle\">Ein interaktives Lernwerkzeug</p>\r\n    </div>\r\n    <div class=\"welcome-content-container\">\r\n      <div class=\"welcome-card about-section\">\r\n        <h2>Über dieses Projekt</h2>\r\n        <p>\r\n          Diese Anwendung wurde im Rahmen des Moduls \"Informatik und Programmieren 2\" (IIP2) an der Hochschule Luzern\r\n          entwickelt.\r\n          Sie dient als interaktives Lernwerkzeug, um die Speicherverwaltungskonzepte in Java besser zu verstehen.\r\n        </p>\r\n        <p>\r\n          Durch visuelle Darstellungen und interaktive Elemente möchten wir komplexe Konzepte wie Stack- und\r\n          Heap-Speicher,\r\n          Instruction Pointer, Stack Frames und Objektreferenzen anschaulich vermitteln.\r\n        </p>\r\n      </div>\r\n      <div class=\"welcome-card features-section\">\r\n        <h2>Funktionen der Anwendung</h2>\r\n        <div class=\"features-grid\">\r\n          <div class=\"feature-item\">\r\n            <div class=\"feature-icon\">\r\n              <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\"\r\n                stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\r\n                <polyline points=\"16 18 22 12 16 6\"></polyline>\r\n                <polyline points=\"8 6 2 12 8 18\"></polyline>\r\n              </svg>\r\n            </div>\r\n            <h3>Code Explorer</h3>\r\n            <p>Zeigt Java-Code mit Syntaxhervorhebung. Ein blinkender Pfeil markiert die nächste auszuführende Zeile.\r\n            </p>\r\n          </div>\r\n          <div class=\"feature-item\">\r\n            <div class=\"feature-icon\">\r\n              <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\"\r\n                stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\r\n                <rect x=\"2\" y=\"2\" width=\"20\" height=\"8\" rx=\"2\" ry=\"2\"></rect>\r\n                <rect x=\"2\" y=\"14\" width=\"20\" height=\"8\" rx=\"2\" ry=\"2\"></rect>\r\n                <line x1=\"6\" y1=\"6\" x2=\"6\" y2=\"6\"></line>\r\n                <line x1=\"6\" y1=\"18\" x2=\"6\" y2=\"18\"></line>\r\n              </svg>\r\n            </div>\r\n            <h3>Memory Visualizer</h3>\r\n            <p>Stellt Stack und Heap in Echtzeit dar. Zeigt Variablen, Objekte und Referenzen während der\r\n              Code-Ausführung.</p>\r\n          </div>\r\n          <div class=\"feature-item\">\r\n            <div class=\"feature-icon\">\r\n              <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\"\r\n                stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\r\n                <polygon points=\"13 2 3 14 12 14 11 22 21 10 12 10 13 2\"></polygon>\r\n              </svg>\r\n            </div>\r\n            <h3>Schrittweise Ausführung</h3>\r\n            <p>Führe den Code Zeile für Zeile aus, gehe vor und zurück, und beobachte die Änderungen im Speicher.</p>\r\n          </div>\r\n          <div class=\"feature-item\">\r\n            <div class=\"feature-icon\">\r\n              <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\"\r\n                stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\r\n                <path d=\"M2 3h6a4 4 0 0 1 4 4v14a3 3 0 0 0-3-3H2z\"></path>\r\n                <path d=\"M22 3h-6a4 4 0 0 0-4 4v14a3 3 0 0 1 3-3h7z\"></path>\r\n              </svg>\r\n            </div>\r\n            <h3>Theorie & Konzepte</h3>\r\n            <p>Lerne die theoretischen Grundlagen zu Stack, Heap, Call Stack und anderen wichtigen\r\n              Java-Speicherkonzepten.</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"welcome-card preview-section\">\r\n        <h2>Vorschau der Visualisierung</h2>\r\n        <div class=\"visualizer-preview\">\r\n          <img src=\"/visualizer-preview.png\" class=\"preview-image\" alt=\"Java Speicherverwaltung Visualisierung\"\r\n            @error=\"handleImageError\" />\r\n          <div v-if=\"imageError\" class=\"preview-placeholder\">\r\n            <div class=\"mockup-container\">\r\n              <div class=\"mockup-code-panel\">\r\n                <div class=\"mockup-code-header\">Java Code</div>\r\n                <div class=\"mockup-code-lines\">\r\n                  <div class=\"mockup-code-line\"><span class=\"line-num\">1</span> <span class=\"code-keyword\">public</span>\r\n                    <span class=\"code-keyword\">class</span> <span class=\"code-class\">Example</span> {\r\n                  </div>\r\n                  <div class=\"mockup-code-line\"><span class=\"line-num\">2</span> <span class=\"code-keyword\">public</span>\r\n                    <span class=\"code-keyword\">static</span> <span class=\"code-keyword\">void</span> <span\r\n                      class=\"code-method\">main</span>(<span class=\"code-class\">String</span>[] args) {\r\n                  </div>\r\n                  <div class=\"mockup-code-line active-line\">\r\n                    <span class=\"line-spacer\"></span>\r\n                    <span class=\"line-num\">3</span>\r\n                    <span class=\"code-keyword\">int</span> x = 5;\r\n                  </div>\r\n                  <div class=\"mockup-code-line\">\r\n                    <span class=\"ip-arrow\">▶</span>\r\n                    <span class=\"line-num\">4</span>\r\n                    <span class=\"code-class\">String</span> message = <span class=\"code-string\">\"Hello\"</span>;\r\n                  </div>\r\n                  <div class=\"mockup-code-line\"><span class=\"line-spacer\"></span><span class=\"line-num\">5</span> <span\r\n                      class=\"code-class\">System</span>.out.println(message + <span class=\"code-string\">\"\r\n                      World!\"</span>);</div>\r\n                  <div class=\"mockup-code-line\"><span class=\"line-spacer\"></span><span class=\"line-num\">6</span> }</div>\r\n                  <div class=\"mockup-code-line\"><span class=\"line-spacer\"></span><span class=\"line-num\">7</span> }</div>\r\n                </div>\r\n                <div class=\"mockup-controls\">\r\n                  <button class=\"mockup-button prev\">← Previous Step</button>\r\n                  <button class=\"mockup-button next\">Next Step →</button>\r\n                  <button class=\"mockup-button reset\">Reset</button>\r\n                </div>\r\n              </div>\r\n              <div class=\"mockup-memory-panel\">\r\n                <div class=\"mockup-memory-header\">Speicherzustand</div>\r\n                <div class=\"mockup-memory-stack\">\r\n                  <div class=\"mockup-stack-header\">Stack</div>\r\n                  <div class=\"mockup-stack-var\">\r\n                    <div>x: int</div>\r\n                    <div>5</div>\r\n                  </div>\r\n                  <div class=\"mockup-pointer\">SP</div>\r\n                </div>\r\n                <div class=\"mockup-memory-heap\">\r\n                  <div class=\"mockup-heap-header\">Heap</div>\r\n                  <div class=\"mockup-heap-empty\">Heap ist leer</div>\r\n                </div>\r\n                <div class=\"mockup-ip\">\r\n                  <span>Instruction Pointer: Zeile 4</span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div class=\"preview-caption\">Interaktive Visualisierung der Java-Speicherverwaltung</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n\r\n\r\n      <div class=\"welcome-card usage-section\">\r\n        <h2>So verwendest du die Anwendung</h2>\r\n        <ol class=\"usage-steps\">\r\n          <li>\r\n            <strong>1. Code anschauen</strong>\r\n            <p>Auf der linken Seite siehst du den Java-Code, der ausgeführt wird.</p>\r\n          </li>\r\n          <li>\r\n            <strong>2. Durch den Code navigieren</strong>\r\n            <p>Verwende die Buttons \"Next Step\" und \"Previous Step\", um durch den Code zu navigieren.</p>\r\n          </li>\r\n          <li>\r\n            <strong>3. Speicheränderungen beobachten</strong>\r\n            <p>Auf der rechten Seite kannst du sehen, wie sich der Speicherzustand mit jedem Schritt verändert.</p>\r\n          </li>\r\n          <li>\r\n            <strong>4. Theorie erkunden</strong>\r\n            <p>Besuche den \"Theory & Concepts\" Bereich, um mehr über die Speicherverwaltung in Java zu lernen.</p>\r\n          </li>\r\n        </ol>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"welcome-footer\">\r\n      <button @click=\"startVisualizer\" class=\"start-button\">\r\n        Zur Visualisierung\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\"\r\n          stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\r\n          <line x1=\"5\" y1=\"12\" x2=\"19\" y2=\"12\"></line>\r\n          <polyline points=\"12 5 19 12 12 19\"></polyline>\r\n        </svg>\r\n      </button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'WelcomePage',\r\n  data() {\r\n    return {\r\n      imageError: false\r\n    }\r\n  },\r\n  methods: {\r\n    startVisualizer() {\r\n      this.$router.push('/visualizer');\r\n    },\r\n    handleImageError() {\r\n      // Falls das Bild nicht gefunden wird, zeigen wir unsere Mockup-Visualisierung an\r\n      this.imageError = true;\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.welcome-container {\r\n  max-width: 1500px;\r\n  margin: 0 auto;\r\n  padding: 2rem 1rem 4rem;\r\n}\r\n\r\n.welcome-content-container {\r\n  display: grid;\r\n  grid-template-columns: repeat(2, 1fr);\r\n  grid-template-rows: repeat(2, auto);\r\n  gap: 2rem;\r\n  align-items: start;\r\n}\r\n\r\n.welcome-header {\r\n  text-align: center;\r\n  margin-bottom: 3rem;\r\n}\r\n\r\n.welcome-header h1 {\r\n  font-size: 2.5rem;\r\n  font-weight: 700;\r\n  background: linear-gradient(to right, #4361ee, #4895ef);\r\n  background-clip: text;\r\n  -webkit-background-clip: text;\r\n  -webkit-text-fill-color: transparent;\r\n  margin-bottom: 0.5rem;\r\n}\r\n\r\n.welcome-header .subtitle {\r\n  font-size: 1.2rem;\r\n  color: #4b5563;\r\n}\r\n\r\n/* Vorschau-Bereich */\r\n.visualizer-preview {\r\n  margin: 1.5rem 0;\r\n  border-radius: 0.75rem;\r\n  overflow: hidden;\r\n}\r\n\r\n.preview-image {\r\n  width: 100%;\r\n  border-radius: 0.5rem;\r\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.preview-placeholder {\r\n  background-color: #f8fafc;\r\n  border-radius: 0.5rem;\r\n  padding: 2rem;\r\n  text-align: center;\r\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.preview-caption {\r\n  margin-top: 1rem;\r\n  color: #6b7280;\r\n  font-style: italic;\r\n}\r\n\r\n/* Mockup visualizer */\r\n.mockup-container {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: 20px;\r\n  margin-bottom: 1rem;\r\n}\r\n\r\n.mockup-code-panel,\r\n.mockup-memory-panel {\r\n  flex: 1;\r\n  min-width: 300px;\r\n  background: white;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\r\n  overflow: hidden;\r\n}\r\n\r\n.mockup-code-header,\r\n.mockup-memory-header,\r\n.mockup-stack-header,\r\n.mockup-heap-header {\r\n  background: #f3f4f6;\r\n  padding: 12px;\r\n  font-weight: bold;\r\n  border-bottom: 1px solid #e5e7eb;\r\n}\r\n\r\n.mockup-code-lines {\r\n  padding: 10px;\r\n  font-family: monospace;\r\n  background: #f8fafc;\r\n}\r\n\r\n.mockup-code-line {\r\n  padding: 3px 5px;\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.line-num {\r\n  color: #9ca3af;\r\n  width: 30px;\r\n  display: inline-block;\r\n  text-align: right;\r\n  padding-right: 10px;\r\n}\r\n\r\n.code-keyword {\r\n  color: #8250df;\r\n}\r\n\r\n.code-class {\r\n  color: #0550ae;\r\n}\r\n\r\n.code-method {\r\n  color: #953800;\r\n}\r\n\r\n.code-string {\r\n  color: #0a7aca;\r\n}\r\n\r\n.ip-arrow {\r\n  color: #22cfff;\r\n  margin-left: 10px;\r\n  font-weight: bold;\r\n  animation: blink 1.5s infinite;\r\n}\r\n\r\n.active-line {\r\n  background: #ffff99;\r\n  font-weight: bold;\r\n}\r\n\r\n.mockup-controls {\r\n  padding: 12px;\r\n  display: flex;\r\n  gap: 10px;\r\n  justify-content: space-between;\r\n  background: white;\r\n}\r\n\r\n.mockup-button {\r\n  padding: 6px 10px;\r\n  background: #4361ee;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 4px;\r\n  font-size: 12px;\r\n}\r\n\r\n.mockup-button.prev {\r\n  background: #2196F3;\r\n}\r\n\r\n.mockup-button.reset {\r\n  background: #f44336;\r\n}\r\n\r\n.mockup-memory-stack,\r\n.mockup-memory-heap,\r\n.mockup-ip {\r\n  padding: 12px;\r\n  margin-bottom: 1px;\r\n  background: white;\r\n}\r\n\r\n.mockup-stack-var {\r\n  background: #e3f2fd;\r\n  border: 1px solid #bbdefb;\r\n  padding: 8px;\r\n  margin: 8px 0;\r\n  border-radius: 4px;\r\n  display: flex;\r\n  justify-content: space-between;\r\n}\r\n\r\n.mockup-pointer {\r\n  background: #4361ee;\r\n  color: white;\r\n  width: fit-content;\r\n  padding: 2px 6px;\r\n  font-size: 12px;\r\n  border-radius: 3px;\r\n}\r\n\r\n.mockup-heap-empty {\r\n  padding: 15px;\r\n  color: #9ca3af;\r\n  text-align: center;\r\n  background: #f9fafb;\r\n  border-radius: 4px;\r\n  margin-top: 5px;\r\n}\r\n\r\n.mockup-ip {\r\n  background: #f3f4f6;\r\n  text-align: center;\r\n  font-size: 14px;\r\n}\r\n\r\n\r\n\r\n.welcome-card {\r\n  background: white;\r\n  border-radius: 0.75rem;\r\n  padding: 2rem;\r\n  margin-bottom: 2rem;\r\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);\r\n}\r\n\r\n.welcome-card h2 {\r\n  font-size: 1.5rem;\r\n  margin-bottom: 1.5rem;\r\n  color: #111827;\r\n  border-bottom: 2px solid #f0f0f0;\r\n  padding-bottom: 0.75rem;\r\n}\r\n\r\n.features-grid {\r\n  display: grid;\r\n  grid-template-columns: repeat(2, 1fr);\r\n  grid-template-rows: repeat(2, 1fr);\r\n  gap: 2rem;\r\n}\r\n\r\n.feature-item {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: flex-start;\r\n}\r\n\r\n.feature-icon {\r\n  background-color: rgba(67, 97, 238, 0.1);\r\n  color: #4361ee;\r\n  padding: 0.75rem;\r\n  border-radius: 0.5rem;\r\n  margin-bottom: 1rem;\r\n}\r\n\r\n.feature-item h3 {\r\n  font-size: 1.2rem;\r\n  margin-bottom: 0.5rem;\r\n  color: #111827;\r\n}\r\n\r\n.feature-item p {\r\n  color: #4b5563;\r\n  line-height: 1.6;\r\n  font-size: 0.95rem;\r\n}\r\n\r\n.usage-steps {\r\n  list-style-type: none;\r\n  counter-reset: step-counter;\r\n  padding: 0;\r\n}\r\n\r\n.usage-steps li {\r\n  position: relative;\r\n  padding: 1rem 0;\r\n  border-bottom: 1px solid #f0f0f0;\r\n}\r\n\r\n.usage-steps li:last-child {\r\n  border-bottom: none;\r\n}\r\n\r\n.usage-steps li strong {\r\n  color: #4361ee;\r\n  display: block;\r\n  margin-bottom: 0.5rem;\r\n  font-size: 1.1rem;\r\n}\r\n\r\n.about-section p {\r\n  margin-bottom: 1rem;\r\n  line-height: 1.7;\r\n}\r\n\r\n.welcome-footer {\r\n  display: flex;\r\n  justify-content: center;\r\n  margin-top: 3rem;\r\n}\r\n\r\n.start-button {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 0.5rem;\r\n  padding: 0.75rem 2rem;\r\n  background-color: #4361ee;\r\n  color: white;\r\n  font-weight: 600;\r\n  font-size: 1.1rem;\r\n  border: none;\r\n  border-radius: 0.5rem;\r\n  cursor: pointer;\r\n  transition: all 0.2s ease;\r\n}\r\n\r\n.start-button:hover {\r\n  background-color: #3651d7;\r\n  transform: translateY(-2px);\r\n  box-shadow: 0 4px 12px rgba(67, 97, 238, 0.25);\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .welcome-content-container {\r\n    grid-template-columns: 1fr;\r\n    gap: 2rem;\r\n  }\r\n\r\n  .features-grid {\r\n    grid-template-columns: 1fr;\r\n    gap: 1.5rem;\r\n  }\r\n\r\n  .welcome-header h1 {\r\n    font-size: 2rem;\r\n  }\r\n\r\n  .welcome-card {\r\n    padding: 1.5rem;\r\n  }\r\n\r\n  .mockup-container {\r\n    flex-direction: column;\r\n  }\r\n}\r\n</style>","import { render } from \"./WelcomePage.vue?vue&type=template&id=76a7d495&scoped=true\"\nimport script from \"./WelcomePage.vue?vue&type=script&lang=js\"\nexport * from \"./WelcomePage.vue?vue&type=script&lang=js\"\n\nimport \"./WelcomePage.vue?vue&type=style&index=0&id=76a7d495&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-76a7d495\"]])\n\nexport default __exports__","<template>\r\n  <div class=\"theory-container\">\r\n    <!-- Statischer Titel anstelle der Tabs -->\r\n    <h2 class=\"theory-heading\">Theory & Concepts</h2>\r\n    \r\n    <div class=\"card-grid\">\r\n      <div \r\n        v-for=\"(card, index) in theoryCards\" \r\n        :key=\"index\" \r\n        class=\"concept-card\"\r\n        @click=\"showTheoryDetail(card.id)\"\r\n      >\r\n        <h3 class=\"concept-title\">{{ card.title }}</h3>\r\n        <p class=\"concept-description\">{{ card.shortDescription }}</p>\r\n        <div class=\"card-footer\">\r\n          <span class=\"read-more\">Mehr lesen &rarr;</span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'TheoryCards',\r\n  data() {\r\n    return {\r\n      theoryCards: [\r\n        {\r\n          id: 'memory-heap',\r\n          title: 'Memory Heap',\r\n          shortDescription: 'The heap is where objects are stored. When you create an object using \\'new\\', it\\'s allocated on the heap.'\r\n        },\r\n        {\r\n          id: 'memory-stack',\r\n          title: 'Memory Stack',\r\n          shortDescription: 'The stack stores local variables and method call information. Each thread has its own stack.'\r\n        },\r\n        {\r\n          id: 'callstack',\r\n          title: 'Call Stack',\r\n          shortDescription: 'The call stack keeps track of method calls. Each method call creates a new frame on the stack.'\r\n        },\r\n        {\r\n          id: 'stack-pointer',\r\n          title: 'Stack Pointer',\r\n          shortDescription: 'Points to the top of the stack, indicating the current execution context.'\r\n        },\r\n        {\r\n          id: 'instruction-pointer',\r\n          title: 'Instruction Pointer',\r\n          shortDescription: 'Points to the next instruction to be executed in the program.'\r\n        },\r\n        {\r\n          id: 'method-area',\r\n          title: 'Method Area',\r\n          shortDescription: 'Stores class structures, method code, and constant pool information.'\r\n        }\r\n      ]\r\n    }\r\n  },\r\n  methods: {\r\n    showTheoryDetail(conceptId) {\r\n      // Direkt zur entsprechenden Route navigieren\r\n      this.$router.push({ name: `theory-${conceptId}` })\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n:root {\r\n  --border-color: #e2e8f0;\r\n  --bg-muted: #f1f5f9;\r\n  --text-muted: #64748b;\r\n  --primary-color: #3b82f6;\r\n  --accent-color: #4361ee;\r\n}\r\n\r\n.theory-container {\r\n  padding: 2rem;\r\n  max-width: 1200px;\r\n  margin: 0 auto;\r\n  background-color: #f8f9fa;\r\n  border-radius: 0.5rem;\r\n}\r\n\r\n.theory-heading {\r\n  text-align: center;\r\n  margin-bottom: 3rem;\r\n  color: #1e293b;\r\n  font-size: 1.75rem;\r\n  font-weight: 600;\r\n}\r\n\r\n/* Card Grid - Fixed 2x3 Layout */\r\n.card-grid {\r\n  display: grid;\r\n  grid-template-columns: repeat(3, 1fr);\r\n  grid-template-rows: repeat(2, auto);\r\n  column-gap: 2.5rem;\r\n  row-gap: 5rem;     /* Deutlich erhöhter vertikaler Abstand */\r\n  margin-bottom: 2rem;\r\n}\r\n\r\n.concept-card {\r\n  border: 1px solid var(--border-color);\r\n  border-radius: 0.5rem;\r\n  padding: 1.5rem;\r\n  background-color: #ffffff;\r\n  transition: box-shadow 0.2s, transform 0.2s;\r\n  cursor: pointer;\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 100%;\r\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.concept-card:hover {\r\n  box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);\r\n  transform: translateY(-2px);\r\n}\r\n\r\n.concept-title {\r\n  font-size: 1.25rem;\r\n  font-weight: 600;\r\n  margin-bottom: 0.75rem;\r\n  color: #1e293b;\r\n}\r\n\r\n.concept-description {\r\n  color: var(--text-muted);\r\n  font-size: 0.95rem;\r\n  line-height: 1.5;\r\n  flex-grow: 1;\r\n}\r\n\r\n.card-footer {\r\n  margin-top: 1.5rem;\r\n  text-align: right;\r\n}\r\n\r\n.read-more {\r\n  color: var(--accent-color);\r\n  font-size: 0.875rem;\r\n  font-weight: 500;\r\n}\r\n\r\n/* Responsive adjustments */\r\n@media (max-width: 900px) {\r\n  .card-grid {\r\n    grid-template-columns: repeat(2, 1fr);\r\n    grid-template-rows: auto;\r\n    column-gap: 2rem;\r\n    row-gap: 4rem;\r\n  }\r\n}\r\n\r\n@media (max-width: 600px) {\r\n  .card-grid {\r\n    grid-template-columns: 1fr;\r\n    row-gap: 3.5rem;\r\n  }\r\n}\r\n</style>","import { render } from \"./TheoryCards.vue?vue&type=template&id=c0ca89f0&scoped=true\"\nimport script from \"./TheoryCards.vue?vue&type=script&lang=js\"\nexport * from \"./TheoryCards.vue?vue&type=script&lang=js\"\n\nimport \"./TheoryCards.vue?vue&type=style&index=0&id=c0ca89f0&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-c0ca89f0\"]])\n\nexport default __exports__","<template>\r\n  <div class=\"quiz-container\">\r\n    <div v-if=\"quizStarted && !quizCompleted\" class=\"quit-button-container\">\r\n      <button @click=\"endQuiz\" class=\"quiz-button quit-button\" data-tooltip=\"Quiz frühzeitig beenden\">X</button>\r\n    </div>\r\n    \r\n    <!-- Quiz Startseite-->\r\n    <h1 class=\"quiz-title\">Speicherverwaltung in Java: Quiz</h1>\r\n    \r\n    <div v-if=\"!quizStarted\" class=\"quiz-intro\">\r\n      <div class=\"intro-content\">\r\n        <p>Teste dein Wissen über die Speicherverwaltung in Java mit diesem kurzen Quiz!</p>\r\n        <p>Das Quiz besteht aus {{ questions.length }} Fragen zu den wichtigsten Konzepten:</p>\r\n        <ul>\r\n          <li>Call Stack</li>\r\n          <li>Memory Heap</li>\r\n          <li>Stack Pointer</li>\r\n          <li>Instruction Pointer</li>\r\n          <li>Method Area</li>\r\n        </ul>\r\n      </div>\r\n      \r\n      <button @click=\"startQuiz\" class=\"quiz-button start-button\">Quiz starten</button>\r\n    </div>\r\n\r\n    <!--Anzeige Progressbar & Fragen counter-->\r\n    <div v-else-if=\"!quizCompleted\" class=\"quiz-question-container\">\r\n      <div class=\"quiz-progress\">\r\n        <div class=\"progress-bar\">\r\n          <div class=\"progress-fill\" :style=\"{ width: `${progress}%` }\"></div>\r\n        </div>\r\n        <div class=\"progress-text\">Frage {{ currentQuestionIndex + 1 }} von {{ questions.length }}</div>\r\n      </div>\r\n      \r\n      <!--Multiple choice container-->\r\n      <div class=\"question-card\">\r\n        <h2 class=\"question-text\">{{ currentQuestion.question }}</h2>\r\n        \r\n        <div class=\"options-list\">\r\n          <div \r\n            v-for=\"(option, index) in currentQuestion.options\" \r\n            :key=\"index\" \r\n            class=\"option-item\"\r\n            :class=\"{\r\n              'selected': selectedOption === index,\r\n              'correct': showAnswer && index === currentQuestion.correctAnswer,\r\n              'incorrect': showAnswer && selectedOption === index && index !== currentQuestion.correctAnswer\r\n            }\"\r\n            @click=\"selectOption(index)\"\r\n          >\r\n            <span class=\"option-marker\">{{ ['A', 'B', 'C', 'D'][index] }}</span>\r\n            <span class=\"option-text\">{{ option }}</span>\r\n          </div>\r\n        </div>\r\n\r\n        <div v-if=\"showAnswer\" class=\"feedback-container\">\r\n          <div class=\"feedback\" :class=\"isCorrect ? 'correct-feedback' : 'incorrect-feedback'\">\r\n            <div class=\"feedback-icon\">{{ isCorrect ? '✓' : '✗' }}</div>\r\n            <div class=\"feedback-text\">\r\n              <p><strong>{{ isCorrect ? 'Richtig!' : 'Falsch!' }}</strong></p>\r\n              <p>{{ currentQuestion.explanation }}</p>\r\n            </div>\r\n          </div>\r\n          <button @click=\"nextQuestion\" class=\"quiz-button\">\r\n            {{ currentQuestionIndex < questions.length - 1 ? 'Nächste Frage' : 'Ergebnis anzeigen' }}\r\n          </button>\r\n        </div>\r\n        <div v-else class=\"action-container\">\r\n          <button @click=\"checkAnswer\" class=\"quiz-button\" :disabled=\"selectedOption === null\">Antwort prüfen</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Quiz Ergebnisse-->\r\n    <div v-else class=\"quiz-results\">\r\n      <h2>Quiz abgeschlossen!</h2>\r\n      <div class=\"score-display\">\r\n        <div class=\"score-circle\">\r\n          {{ score }} / {{ answeredQuestions }}\r\n        </div>\r\n        <p class=\"score-percentage\" v-if=\"answeredQuestions > 0\">\r\n          {{ Math.round((score / answeredQuestions) * 100) }}%\r\n        </p>\r\n        <p class=\"score-percentage\" v-else>\r\n          Es wurde noch keine Fragen beantwortet.\r\n        </p>\r\n      </div>\r\n\r\n      <div class=\"result-feedback\">\r\n        <p v-if=\"answeredQuestions === questions.length && score === questions.length\">Perfekt! Du beherrschst die Speicherverwaltung in Java!</p>\r\n        <p v-else-if=\"answeredQuestions === questions.length && score / answeredQuestions >= 0.8\">Sehr gut! Du verstehst die meisten Konzepte der Speicherverwaltung.</p>\r\n        <p v-else-if=\"answeredQuestions === questions.length && score / answeredQuestions >= 0.6\">Gut gemacht! Du hast ein solides Grundverständnis.</p>\r\n        <p v-else-if=\"answeredQuestions === questions.length\">Du solltest die Theorie nochmal wiederholen, um dein Wissen zu vertiefen.</p>\r\n        <p v-else-if=\"answeredQuestions > 0\">Du hast {{ score }} von {{ answeredQuestions }} Fragen richtig beantwortet.</p>\r\n        <p v-else>Du hast das Quiz vorzeitig beendet.</p>\r\n      </div>\r\n\r\n      <div class=\"result-actions\">\r\n        <button @click=\"restartQuiz\" class=\"quiz-button\">Quiz wiederholen</button>\r\n        <router-link to=\"/theory\" class=\"theory-link\">Zurück zur Theorie</router-link>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'QuizPage',\r\n  data() {\r\n    return {\r\n      quizStarted: false,\r\n      quizCompleted: false,\r\n      currentQuestionIndex: 0,\r\n      selectedOption: null,\r\n      showAnswer: false,\r\n      score: 0,\r\n      answeredQuestions: 0,\r\n      originalQuestions: [\r\n        // Quizfragen\r\n        {\r\n          question: \"Was ist der Call Stack?\",\r\n          options: [\r\n            \"Ein Speicherbereich für dynamisch erzeugte Objekte\",\r\n            \"Eine Datenstruktur zur Verfolgung von Methodenaufrufen\",\r\n            \"Ein Bereich zur Speicherung von statischen Variablen\",\r\n            \"Ein Register, das auf den aktuellen Speicherbereich zeigt\"\r\n          ],\r\n          correctAnswer: 1,\r\n          explanation: \"Der Call Stack ist eine Datenstruktur, die von der JVM verwendet wird, um den Ausführungsverlauf von Methodenaufrufen zu verfolgen.\"\r\n        },\r\n        {\r\n          question: \"Welche Daten werden im Memory Heap gespeichert?\",\r\n          options: [\r\n            \"Nur primitive Datentypen wie int und boolean\",\r\n            \"Nur lokale Variablen einer Methode\",\r\n            \"Objekte und Arrays\",\r\n            \"Nur statische Variablen\"\r\n          ],\r\n          correctAnswer: 2,\r\n          explanation: \"Der Memory Heap ist ein dynamischer Speicherbereich, in dem Objekte und Arrays gespeichert werden.\"\r\n        },\r\n        {\r\n          question: \"Was passiert, wenn der Stack voll ist?\",\r\n          options: [\r\n            \"OutOfMemoryError wird ausgelöst\",\r\n            \"StackOverflowError wird ausgelöst\",\r\n            \"Die JVM erstellt automatisch einen neuen Stack\",\r\n            \"Der Garbage Collector gibt Speicher frei\"\r\n          ],\r\n          correctAnswer: 1,\r\n          explanation: \"Wenn der Stack voll ist, wird ein StackOverflowError ausgelöst, häufig durch zu tiefe Rekursionen.\"\r\n        },\r\n        {\r\n          question: \"Was zeigt der Stack Pointer an?\",\r\n          options: [\r\n            \"Die nächste auszuführende Anweisung im Bytecode\",\r\n            \"Die Grösse des verfügbaren Heap-Speichers\",\r\n            \"Die aktuelle Position im Call Stack\",\r\n            \"Die Adresse des zuletzt erstellten Objekts\"\r\n          ],\r\n          correctAnswer: 2,\r\n          explanation: \"Der Stack Pointer ist ein Register, das auf die aktuelle Position im Stack zeigt und bei jedem Methodenaufruf aktualisiert wird.\"\r\n        },\r\n        {\r\n          question: \"Was ist die Aufgabe des Instruction Pointers?\",\r\n          options: [\r\n            \"Er zeigt auf die nächste auszuführende Bytecode-Instruktion\",\r\n            \"Er verwaltet die Speicherbelegung im Heap\",\r\n            \"Er identifiziert nicht mehr benötigte Objekte für den Garbage Collector\",\r\n            \"Er speichert die Adressen aller statischen Variablen\"\r\n          ],\r\n          correctAnswer: 0,\r\n          explanation: \"Der Instruction Pointer (Program Counter) zeigt auf die nächste auszuführende Bytecode-Instruktion und steuert den Programmfluss.\"\r\n        },\r\n        {\r\n          question: \"Was wird in der Method Area gespeichert?\",\r\n          options: [\r\n            \"Nur lokale Variablen einer Methode\",\r\n            \"Nur Objekte und ihre Instanzvariablen\",\r\n            \"Klassenmetadaten, statische Variablen und Bytecode\",\r\n            \"Nur Referenzvariablen, die auf den Heap zeigen\"\r\n          ],\r\n          correctAnswer: 2,\r\n          explanation: \"Die Method Area enthält Klassenmetadaten, statische Variablen und den kompilierten Bytecode aller Methoden.\"\r\n        },\r\n        {\r\n          question: \"Was ist NICHT im Stack Frame enthalten?\",\r\n          options: [\r\n            \"Lokale Variablen\",\r\n            \"Parameter der Methode\",\r\n            \"Instanzvariablen eines Objekts\",\r\n            \"Rücksprungadresse\"\r\n          ],\r\n          correctAnswer: 2,\r\n          explanation: \"Instanzvariablen sind Teil eines Objekts und werden im Heap gespeichert, nicht im Stack Frame.\"\r\n        },\r\n        {\r\n          question: \"Welche Aussage zum Garbage Collector ist korrekt?\",\r\n          options: [\r\n            \"Er gibt den Speicher von lokalen Variablen im Stack frei\",\r\n            \"Er befreit nicht mehr referenzierte Objekte im Heap\",\r\n            \"Er muss manuell vom Programmierer aufgerufen werden\",\r\n            \"Er komprimiert Stack und Heap gleichermassen\"\r\n          ],\r\n          correctAnswer: 1,\r\n          explanation: \"Der Garbage Collector identifiziert und entfernt Objekte im Heap, auf die keine Referenzen mehr zeigen.\"\r\n        },\r\n        {\r\n          question: \"Warum ist der Zugriff auf den Stack schneller als auf den Heap?\",\r\n          options: [\r\n            \"Weil der Stack kleiner ist als der Heap\",\r\n            \"Weil der Stack in einem speziellen Cache gespeichert wird\",\r\n            \"Weil der Stack nach dem LIFO-Prinzip arbeitet und vorhersehbare Adressierungsmuster hat\",\r\n            \"Weil der Stack nur primitive Datentypen enthält\"\r\n          ],\r\n          correctAnswer: 2,\r\n          explanation: \"Der Stack ist schneller, weil er nach dem LIFO-Prinzip arbeitet und dadurch vorhersehbare Speicheradressierungen ermöglicht.\"\r\n        },\r\n        {\r\n          question: \"Was passiert mit lokalen Variablen, wenn eine Methode beendet wird?\",\r\n          options: [\r\n            \"Sie bleiben im Stack, bis der Garbage Collector sie entfernt\",\r\n            \"Sie werden in den Heap verschoben\",\r\n            \"Sie werden automatisch vom Stack entfernt\",\r\n            \"Sie werden zu statischen Variablen\"\r\n          ],\r\n          correctAnswer: 2,\r\n          explanation: \"Lokale Variablen werden automatisch vom Stack entfernt, wenn die Methode beendet wird und der Stack Frame gelöscht wird.\"\r\n        },\r\n        \r\n        // 10 neue Fragen\r\n        {\r\n          question: \"Wo werden primitive Datentypen wie int und boolean in Java gespeichert?\",\r\n          options: [\r\n            \"Immer im Heap\",\r\n            \"Immer im Stack\",\r\n            \"Im Stack als lokale Variablen, im Heap als Objektattribute\",\r\n            \"In der Method Area\"\r\n          ],\r\n          correctAnswer: 2,\r\n          explanation: \"Primitive Datentypen werden im Stack gespeichert, wenn sie lokale Variablen sind. Als Objektattribute (Instanzvariablen) werden sie im Heap als Teil des Objekts gespeichert.\"\r\n        },\r\n        {\r\n          question: \"Was ist String Interning in Java?\",\r\n          options: [\r\n            \"Eine Methode, um Strings zu verschlüsseln\",\r\n            \"Ein Mechanismus, der identische String-Literale im String-Pool wiederverwendet\",\r\n            \"Eine Technik zum Speichern von Unicode-Zeichen\",\r\n            \"Ein Prozess zur Optimierung von Stringverkettungen\"\r\n          ],\r\n          correctAnswer: 1,\r\n          explanation: \"String Interning ist ein Mechanismus in Java, bei dem identische String-Literale in einem speziellen Bereich (String-Pool) im Heap gespeichert und wiederverwendet werden, um Speicherplatz zu sparen.\"\r\n        },\r\n        {\r\n          question: \"Was ist ein Memory Leak in Java?\",\r\n          options: [\r\n            \"Wenn die JVM zu wenig Arbeitsspeicher zugewiesen bekommt\",\r\n            \"Wenn Objekte erstellt werden, aber nie verwendet werden\",\r\n            \"Wenn Objekte nicht mehr benötigt werden, aber immer noch referenziert werden\",\r\n            \"Wenn der Garbage Collector fehlerhaft ist\"\r\n          ],\r\n          correctAnswer: 2,\r\n          explanation: \"Ein Memory Leak in Java tritt auf, wenn Objekte nicht mehr benötigt werden, aber weiterhin referenziert werden, sodass der Garbage Collector sie nicht entfernen kann. Dies führt zu unnötigem Speicherverbrauch.\"\r\n        },\r\n        {\r\n          question: \"Was ist der Unterschied zwischen deep copy und shallow copy?\",\r\n          options: [\r\n            \"Deep copy ist schneller, shallow copy ist speichereffizienter\",\r\n            \"Deep copy kopiert alle referenzierten Objekte, shallow copy nur die Referenzen\",\r\n            \"Deep copy wird für primitive Typen verwendet, shallow copy für Objekte\",\r\n            \"Deep copy braucht den Garbage Collector, shallow copy nicht\"\r\n          ],\r\n          correctAnswer: 1,\r\n          explanation: \"Bei einer shallow copy werden nur die Referenzen kopiert, nicht die referenzierten Objekte selbst. Bei einer deep copy werden auch alle referenzierten Objekte rekursiv kopiert.\"\r\n        },\r\n        {\r\n          question: \"Wann ist ein Objekt für den Garbage Collector bereit zur Entfernung?\",\r\n          options: [\r\n            \"Wenn das Objekt explizit mit delete() gelöscht wird\",\r\n            \"Wenn keine Referenzen mehr auf das Objekt zeigen\",\r\n            \"Wenn das Objekt die finalize() Methode überschreibt\",\r\n            \"Wenn das Objekt aus einer Methode zurückkehrt\"\r\n          ],\r\n          correctAnswer: 1,\r\n          explanation: \"Ein Objekt ist für den Garbage Collector bereit, wenn keine Referenzen mehr darauf zeigen und es somit nicht mehr erreichbar ist (unreachable).\"\r\n        },\r\n        {\r\n          question: \"Warum kann der Garbage Collector zu Leistungsproblemen führen?\",\r\n          options: [\r\n            \"Er benötigt zusätzlichen Speicher für seine Verwaltungsdaten\",\r\n            \"Er pausiert die Anwendungsausführung während der Speicherbereinigung\",\r\n            \"Er verschiebt ständig Objekte im Heap\",\r\n            \"Er arbeitet mit einer ineffizienten linearen Suche\"\r\n          ],\r\n          correctAnswer: 1,\r\n          explanation: \"Der Garbage Collector kann zu Leistungsproblemen führen, weil er für die Speicherbereinigung (insbesondere bei Major GC) die Anwendungsausführung pausieren muss, was zu sogenannten 'Stop-the-World'-Pausen führt.\"\r\n        },\r\n        {\r\n          question: \"Welche Auswirkung hat Autoboxing auf den Speicherverbrauch?\",\r\n          options: [\r\n            \"Es reduziert den Speicherverbrauch durch Wiederverwendung von Objekten\",\r\n            \"Es hat keine Auswirkung auf den Speicherverbrauch\",\r\n            \"Es erhöht den Speicherverbrauch, da primitive Typen in Objekte umgewandelt werden\",\r\n            \"Es komprimiert den Speicher durch spezielle JVM-Optimierungen\"\r\n          ],\r\n          correctAnswer: 2,\r\n          explanation: \"Autoboxing wandelt primitive Datentypen automatisch in ihre entsprechenden Wrapper-Objekte um (z.B. int zu Integer). Dies erhöht den Speicherverbrauch, da Objekte mehr Speicher benötigen als primitive Typen.\"\r\n        },\r\n        {\r\n          question: \"Was ist das Besondere an der finalize()-Methode?\",\r\n          options: [\r\n            \"Sie wird garantiert ausgeführt, wenn ein Objekt aus dem Speicher entfernt wird\",\r\n            \"Sie erlaubt einem Objekt, sich selbst vor der Garbage Collection zu retten\",\r\n            \"Sie beschleunigt die Garbage Collection für das Objekt\",\r\n            \"Sie führt zu einer sofortigen Speicherfreigabe\"\r\n          ],\r\n          correctAnswer: 1,\r\n          explanation: \"Die finalize()-Methode wird vom Garbage Collector aufgerufen, bevor ein Objekt entfernt wird, und erlaubt dem Objekt, sich selbst zu 'retten', indem es eine neue Referenz auf sich erstellt. Dies ist jedoch nicht empfohlen und seit Java 9 als veraltet markiert.\"\r\n        },\r\n        {\r\n          question: \"Wie können Anwendungen mit eingeschränktem Speicher optimiert werden?\",\r\n          options: [\r\n            \"Durch Verwendung von mehr statischen Methoden\",\r\n            \"Durch Verwendung von mehr lokalen Variablen anstatt Objektattributen\",\r\n            \"Durch Verwendung von primitiven Datentypen anstelle von Wrapper-Klassen wo möglich\",\r\n            \"Durch Bevorzugung von Vererbung gegenüber Komposition\"\r\n          ],\r\n          correctAnswer: 2,\r\n          explanation: \"Primitive Datentypen (wie int, boolean) benötigen weniger Speicher als ihre Wrapper-Klassen (Integer, Boolean). Daher kann ihre Verwendung, wo immer möglich, den Speicherverbrauch reduzieren.\"\r\n        },\r\n        {\r\n          question: \"Was passiert mit dem Speicher einer inneren (nicht-statischen) Klasse?\",\r\n          options: [\r\n            \"Sie teilt sich den Speicher mit ihrer äusseren Klasse\",\r\n            \"Sie hat keinen eigenen Speicherbedarf\",\r\n            \"Sie speichert implizit eine Referenz auf ihre äussere Klasse\",\r\n            \"Sie wird in einem separaten Speicherbereich ausserhalb von Heap und Stack allokiert\"\r\n          ],\r\n          correctAnswer: 2,\r\n          explanation: \"Eine innere (nicht-statische) Klasse speichert implizit eine Referenz auf die Instanz ihrer äusseren Klasse. Dies bedeutet, dass Objekte der äusseren Klasse nicht vom Garbage Collector entfernt werden können, solange Objekte der inneren Klasse existieren.\"\r\n        }\r\n      ],\r\n      questions: [] // Will be populated with shuffled questions\r\n    };\r\n  },\r\n  created() {\r\n    // Initialize questions with a copy of originalQuestions\r\n    this.questions = [...this.originalQuestions];\r\n  },\r\n  computed: {\r\n    currentQuestion() {\r\n      return this.questions[this.currentQuestionIndex];\r\n    },\r\n    isCorrect() {\r\n      return this.selectedOption === this.currentQuestion.correctAnswer;\r\n    },\r\n    progress() {\r\n      return ((this.currentQuestionIndex + 1) / this.questions.length) * 100;\r\n    }\r\n  },\r\n  methods: {\r\n    startQuiz() {\r\n      this.quizStarted = true;\r\n      this.quizCompleted = false;\r\n      this.currentQuestionIndex = 0;\r\n      this.score = 0;\r\n      this.answeredQuestions = 0;\r\n      this.selectedOption = null;\r\n      this.showAnswer = false;\r\n      \r\n      // Quiz fragen mischen\r\n      this.shuffleQuestions();\r\n    },\r\n    shuffleQuestions() {\r\n      // Create a copy of the original questions\r\n      const shuffled = [...this.originalQuestions];\r\n      \r\n      // Fisher-Yates shuffle algorithm\r\n      for (let i = shuffled.length - 1; i > 0; i--) {\r\n        const j = Math.floor(Math.random() * (i + 1));\r\n        [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];\r\n      }\r\n      \r\n      // Update questions with shuffled array\r\n      this.questions = shuffled;\r\n    },\r\n    selectOption(index) {\r\n      if (!this.showAnswer) {\r\n        this.selectedOption = index;\r\n      }\r\n    },\r\n    checkAnswer() {\r\n      this.showAnswer = true;\r\n      if (this.isCorrect) {\r\n        this.score++;\r\n      }\r\n      this.answeredQuestions++;\r\n    },\r\n    nextQuestion() {\r\n      if (this.currentQuestionIndex < this.questions.length - 1) {\r\n        this.currentQuestionIndex++;\r\n        this.selectedOption = null;\r\n        this.showAnswer = false;\r\n      } else {\r\n        this.quizCompleted = true;\r\n      }\r\n    },\r\n    endQuiz() {\r\n      this.quizCompleted = true;\r\n    },\r\n    restartQuiz() {\r\n      this.startQuiz();\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.quiz-container {\r\n  max-width: 900px;\r\n  margin: 0 auto;\r\n  padding: 2rem;\r\n  background-color: white;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\r\n  position: relative; \r\n}\r\n\r\n\r\n.quit-button-container {\r\n  position: absolute;\r\n  top: 1rem;\r\n  right: 1rem;\r\n  z-index: 10;\r\n}\r\n\r\n.quiz-title {\r\n  color: #1e293b;\r\n  font-size: 2.25rem;\r\n  text-align: center;\r\n  margin-bottom: 2rem;\r\n  border-bottom: 3px solid #4361ee;\r\n  padding-bottom: 1rem;\r\n  padding-top: 3rem;\r\n}\r\n\r\n.quiz-intro {\r\n  text-align: center;\r\n  margin-bottom: 2rem;\r\n  display: flex;\r\n  flex-direction: column;\r\n  min-height: 400px;\r\n  justify-content: space-between; \r\n}\r\n\r\n.intro-content {\r\n  flex: 1;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n}\r\n\r\n.start-button {\r\n  margin-top: 2rem;\r\n  margin-bottom: 1rem;\r\n  align-self: center; \r\n}\r\n\r\n.quiz-intro p {\r\n  margin-bottom: 1rem;\r\n  font-size: 1.1rem;\r\n  color: #334155;\r\n}\r\n\r\n.quiz-intro ul {\r\n  width: fit-content; \r\n  margin: 1.5rem auto; \r\n  padding-left: 0; \r\n  list-style-position: outside; \r\n  text-align: left; \r\n  display: inline-block;\r\n}\r\n\r\n.quiz-intro li {\r\n  margin-bottom: 0.5rem;\r\n  color: #4361ee;\r\n  padding-left: 0.5rem; /* Abstand zum Bullet Point */\r\n  text-align: left; \r\n}\r\n\r\n.quiz-button {\r\n  background-color: #4361ee;\r\n  color: white;\r\n  border: none;\r\n  padding: 0.75rem 2rem;\r\n  border-radius: 0.5rem;\r\n  font-size: 1rem;\r\n  font-weight: 500;\r\n  cursor: pointer;\r\n  transition: background-color 0.2s;\r\n}\r\n\r\n.quiz-button:hover {\r\n  background-color: #3a56d4;\r\n}\r\n\r\n.quiz-button:disabled {\r\n  background-color: #cbd5e1;\r\n  cursor: not-allowed;\r\n}\r\n\r\n.quiz-progress {\r\n  margin-bottom: 1.5rem;\r\n}\r\n\r\n.progress-bar {\r\n  height: 8px;\r\n  background-color: #e2e8f0;\r\n  border-radius: 4px;\r\n  overflow: hidden;\r\n}\r\n\r\n.progress-fill {\r\n  height: 100%;\r\n  background-color: #4361ee;\r\n  transition: width 0.3s ease;\r\n}\r\n\r\n.progress-text {\r\n  margin-top: 0.5rem;\r\n  text-align: right;\r\n  color: #64748b;\r\n  font-size: 0.9rem;\r\n}\r\n\r\n.question-card {\r\n  background-color: white;\r\n  border: 1px solid #e2e8f0;\r\n  border-radius: 8px;\r\n  padding: 1.5rem;\r\n}\r\n\r\n.question-text {\r\n  color: #1e293b;\r\n  margin-bottom: 1.5rem;\r\n  font-size: 1.4rem;\r\n}\r\n\r\n.options-list {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 1rem;\r\n  margin-bottom: 1.5rem;\r\n}\r\n\r\n.option-item {\r\n  display: flex;\r\n  align-items: flex-start;\r\n  padding: 1rem;\r\n  border: 1px solid #e2e8f0;\r\n  border-radius: 6px;\r\n  cursor: pointer;\r\n  transition: all 0.2s;\r\n}\r\n\r\n.option-item:hover {\r\n  background-color: #a1ccf7;\r\n  border-color: #cbd5e1;\r\n}\r\n\r\n.option-item.selected {\r\n  border-color: #4361ee;\r\n  background-color: #eef2ff;\r\n}\r\n\r\n.option-item.correct {\r\n  border-color: #10b981;\r\n  background-color: #ecfdf5;\r\n}\r\n\r\n.option-item.incorrect {\r\n  border-color: #ef4444;\r\n  background-color: #fef2f2;\r\n}\r\n\r\n.option-marker {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  width: 30px;\r\n  height: 30px;\r\n  background-color: #f1f5f9;\r\n  border-radius: 50%;\r\n  margin-right: 1rem;\r\n  color: #475569;\r\n  font-weight: bold;\r\n}\r\n\r\n.option-text {\r\n  flex: 1;\r\n}\r\n\r\n.feedback-container {\r\n  margin-top: 1.5rem;\r\n}\r\n\r\n.feedback {\r\n  display: flex;\r\n  align-items: flex-start;\r\n  padding: 1rem;\r\n  border-radius: 6px;\r\n  margin-bottom: 1.5rem;\r\n}\r\n\r\n.correct-feedback {\r\n  background-color: #ecfdf5;\r\n  border-left: 4px solid #10b981;\r\n}\r\n\r\n.incorrect-feedback {\r\n  background-color: #fef2f2;\r\n  border-left: 4px solid #ef4444;\r\n}\r\n\r\n.feedback-icon {\r\n  font-size: 1.5rem;\r\n  margin-right: 1rem;\r\n  font-weight: bold;\r\n}\r\n\r\n.correct-feedback .feedback-icon {\r\n  color: #10b981;\r\n}\r\n\r\n.incorrect-feedback .feedback-icon {\r\n  color: #ef4444;\r\n}\r\n\r\n.feedback-text p {\r\n  margin-bottom: 0.5rem;\r\n}\r\n\r\n.action-container {\r\n  display: flex;\r\n  justify-content: flex-start; /* Geändert von center zu flex-start für linksbündige Ausrichtung */\r\n  margin-top: 1.5rem;\r\n}\r\n\r\n.quiz-results {\r\n  text-align: center;\r\n}\r\n\r\n.score-display {\r\n  margin: 2rem 0;\r\n}\r\n\r\n.score-circle {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  width: 120px;\r\n  height: 120px;\r\n  border-radius: 50%;\r\n  background-color: #4361ee;\r\n  color: white;\r\n  font-size: 2rem;\r\n  font-weight: bold;\r\n  margin: 0 auto;\r\n}\r\n\r\n.score-percentage {\r\n  font-size: 1.5rem;\r\n  color: #1e293b;\r\n  margin-top: 1rem;\r\n  font-weight: 600;\r\n}\r\n\r\n.result-feedback {\r\n  margin: 2rem 0;\r\n  font-size: 1.2rem;\r\n  color: #334155;\r\n}\r\n\r\n.result-actions {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 1rem;\r\n  align-items: center;\r\n}\r\n\r\n.theory-link {\r\n  color: #4361ee;\r\n  text-decoration: none;\r\n}\r\n\r\n.theory-link:hover {\r\n  text-decoration: underline;\r\n}\r\n\r\n.quit-button {\r\n  background-color: #cbd5e1;\r\n  position: relative;\r\n  margin-top: 1rem;\r\n  margin-right: 1rem;\r\n}\r\n\r\n.quit-button:hover {\r\n  background-color: #4361ee;\r\n}\r\n\r\n.quit-button[data-tooltip]:hover::after {\r\n  content: attr(data-tooltip);\r\n  position: absolute;\r\n  bottom: -35px;\r\n  right: 0;\r\n  background-color: rgba(0, 0, 0, 0.8);\r\n  color: white;\r\n  padding: 5px 10px;\r\n  border-radius: 4px;\r\n  white-space: nowrap;\r\n  z-index: 100;\r\n}\r\n\r\n@media (max-width: 640px) {\r\n  .quiz-container {\r\n    padding: 1.5rem;\r\n  }\r\n  \r\n  .quiz-title {\r\n    font-size: 1.75rem;\r\n  }\r\n  \r\n  .question-text {\r\n    font-size: 1.25rem;\r\n  }\r\n}\r\n</style>\r\n","import { render } from \"./QuizPage.vue?vue&type=template&id=14737426&scoped=true\"\nimport script from \"./QuizPage.vue?vue&type=script&lang=js\"\nexport * from \"./QuizPage.vue?vue&type=script&lang=js\"\n\nimport \"./QuizPage.vue?vue&type=style&index=0&id=14737426&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-14737426\"]])\n\nexport default __exports__","<template>\r\n  <TheoryLayout title=\"Call Stack\">\r\n    <!--übernimmt TheoryLayout und setzt den Titel auf \"Call Stack\"-->\r\n    <div class=\"theory-content\">\r\n      <h2>Was ist der Call Stack?</h2>\r\n      <p>Der Call Stack (Aufrufstapel) ist eine Datenstruktur, die von der Java Virtual Machine (JVM) verwendet wird, um den Ausführungsverlauf von Methodenaufrufen zu verfolgen. \r\n      </p>\r\n      \r\n      <!-- ASCI visualisierung Beispiel-->\r\n      <div class=\"visual-container\">\r\n        <div class=\"visual-fallback\">\r\n          <pre>\r\n          ┌─────────────────────────┐\r\n          │     main() Frame        │ ← Aktueller Frame\r\n          ├─────────────────────────┤\r\n          │     MethodeA() Frame    │\r\n          ├─────────────────────────┤\r\n          │     MethodeB() Frame    │\r\n          └─────────────────────────┘\r\n          </pre>\r\n        </div>\r\n      </div>\r\n      \r\n      <h3>Funktionsweise:</h3>\r\n      <ul>\r\n        <li>Der Call Stack arbeitet nach dem Last In, First Out-Prinzip (LIFO) - die zuletzt aufgerufene Methode wird als erste beendet.</li>\r\n        <li>Jeder Methodenaufruf erzeugt einen neuen Stack Frame, der auf den Call Stack gelegt wird.</li>\r\n        <li>Ein Stack Frame enthält:\r\n          <ul>\r\n            <li>Lokale Variablen der Methode</li>\r\n            <li>Parameter, die an die Methode übergeben wurden</li>\r\n            <li>Rücksprungadresse (wo die Ausführung fortgesetzt wird, wenn die Methode beendet ist)</li>\r\n            <li>Operanden-Stack für Zwischenberechnungen</li>\r\n          </ul>\r\n        </li>\r\n        <li>Wenn eine Methode beendet wird, wird ihr Frame vom Stack entfernt und der Frame der aufrufenden Methode wird wieder aktiv.</li>\r\n      </ul>\r\n      \r\n      <!-- Beispielcode-->\r\n      <div class=\"example-box\">\r\n        <h4>Praktisches Beispiel:</h4>\r\n        <pre class=\"code-example\">\r\n        public class CallStackExample {\r\n          public static void main(String[] args) {\r\n              System.out.println(\"Start im main\");\r\n              methodA();\r\n              System.out.println(\"Zurück in main\");\r\n          }\r\n          \r\n          public static void methodA() {\r\n              System.out.println(\"In methodA\");\r\n              methodB();\r\n              System.out.println(\"Zurück in methodA\");\r\n          }\r\n          \r\n          public static void methodB() {\r\n              System.out.println(\"In methodB\");\r\n              // Hier könnte ein weiterer Methodenaufruf stehen\r\n          }\r\n        }</pre>\r\n        <div class=\"example-explanation\">\r\n          <p><strong>Call Stack Status während der Ausführung:</strong></p>\r\n          <ol>\r\n            <li>Zunächst ist nur der <code>main()</code>-Frame auf dem Stack</li>\r\n            <li>Nach Aufruf von <code>methodA()</code> kommt ein Frame für <code>methodA()</code> dazu</li>\r\n            <li>Nach Aufruf von <code>methodB()</code> kommt ein Frame für <code>methodB()</code> dazu</li>\r\n            <li>Wenn <code>methodB()</code> endet, wird ihr Frame entfernt, und <code>methodA()</code> wird wieder aktiv</li>\r\n            <li>Wenn <code>methodA()</code> endet, wird ihr Frame entfernt, und <code>main()</code> wird wieder aktiv</li>\r\n          </ol>\r\n        </div>\r\n      </div>\r\n      \r\n      <h3>Der Call Stack in Aktion:</h3>\r\n      <div class=\"animation-placeholder\">\r\n        <p>Hier seht ihr, wie sich der Call Stack während der Programmausführung Schritt für Schritt verändert:</p>\r\n        <div class=\"stack-animation-steps\">\r\n          <div class=\"animation-step\">\r\n            <div class=\"step-description\">1. Programm startet</div>\r\n            <pre>\r\n┌─────────────────────────┐\r\n│     main() Frame        │ ← Aktueller Frame\r\n└─────────────────────────┘\r\n            </pre>\r\n          </div>\r\n          <div class=\"animation-step\">\r\n            <div class=\"step-description\">2. methodA() wird aufgerufen</div>\r\n            <pre>\r\n┌─────────────────────────┐\r\n│     methodA() Frame     │ ← Aktueller Frame\r\n├─────────────────────────┤\r\n│     main() Frame        │\r\n└─────────────────────────┘\r\n            </pre>\r\n          </div>\r\n          <div class=\"animation-step\">\r\n            <div class=\"step-description\">3. methodB() wird aufgerufen</div>\r\n            <pre>\r\n┌─────────────────────────┐\r\n│     methodB() Frame     │ ← Aktueller Frame\r\n├─────────────────────────┤\r\n│     methodA() Frame     │\r\n├─────────────────────────┤\r\n│     main() Frame        │\r\n└─────────────────────────┘\r\n            </pre>\r\n          </div>\r\n          <div class=\"animation-step\">\r\n            <div class=\"step-description\">4. methodB() kehrt zurück</div>\r\n            <pre>\r\n┌─────────────────────────┐\r\n│     methodA() Frame     │ ← Aktueller Frame\r\n├─────────────────────────┤\r\n│     main() Frame        │\r\n└─────────────────────────┘\r\n            </pre>\r\n          </div>\r\n          <div class=\"animation-step\">\r\n            <div class=\"step-description\">5. methodA() kehrt zurück</div>\r\n            <pre>\r\n┌─────────────────────────┐\r\n│     main() Frame        │ ← Aktueller Frame\r\n└─────────────────────────┘\r\n            </pre>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n      <!-- interaktiver Demo-Bereich -->\r\n      <h3>Interaktives Beispiel:</h3>\r\n      <div class=\"interactive-demo\">\r\n        <div class=\"demo-container\">\r\n          <div class=\"code-section\">\r\n            <!-- pre (vorformatierter Txt darstellen)-->\r\n            <pre class=\"code-example interactive-code\">\r\n<span :class=\"{ 'highlight-method': currentStep ===1 }\">public class CallStackExample {</span>\r\n<span :class=\"{ 'highlight-method': currentStep ===2 }\">    public static void <span :class=\"{ 'highlight-active-method': currentStep >= 2 && currentStep <= 4 || currentStep >= 14, 'highlight-in-stack': currentStep >= 2 }\">main</span>(String[] args) {</span>\r\n<span :class=\"{ 'highlight-method': currentStep === 3 }\">        System.out.println(\"Start im main\");</span>\r\n<span :class=\"{ 'highlight-method': currentStep === 4 }\">        <span :class=\"{ 'highlight-active-method': currentStep === 4, 'highlight-in-stack': currentStep >= 5 && currentStep <= 13 }\">methodA</span>();</span>\r\n<span :class=\"{ 'highlight-method': currentStep === 14 }\">        System.out.println(\"Zurück in main\");</span>\r\n<span :class=\"{ 'highlight-method': currentStep === 15 }\">    }</span>\r\n    \r\n<span :class=\"{ 'highlight-method': currentStep === 5 }\">    public static void <span :class=\"{ 'highlight-active-method': currentStep >= 5 && currentStep <= 7 || currentStep >= 11 && currentStep <= 13, 'highlight-in-stack': currentStep >= 5 && currentStep <= 13 }\">methodA</span>() {</span>\r\n<span :class=\"{ 'highlight-method': currentStep === 6 }\">        System.out.println(\"In methodA\");</span>\r\n<span :class=\"{ 'highlight-method': currentStep === 7 }\">        <span :class=\"{ 'highlight-active-method': currentStep === 7, 'highlight-in-stack': currentStep >= 8 && currentStep <= 10 }\">methodB</span>();</span>\r\n<span :class=\"{ 'highlight-method': currentStep === 12 }\">        System.out.println(\"Zurück in methodA\");</span>\r\n<span :class=\"{ 'highlight-method': currentStep === 13 }\">    }</span>\r\n    \r\n<span :class=\"{ 'highlight-method': currentStep === 8 }\">    public static void <span :class=\"{ 'highlight-active-method': currentStep >= 8 && currentStep <= 10, 'highlight-in-stack': currentStep >= 8 && currentStep <= 10 }\">methodB</span>() {</span>\r\n<span :class=\"{ 'highlight-method': currentStep === 9 }\">        System.out.println(\"In methodB\");</span>\r\n<span :class=\"{ 'highlight-method': currentStep === 10 }\">    }</span>\r\n<span :class=\"{ 'highlight-method': currentStep === 11 }\">}</span></pre>\r\n          </div>\r\n          \r\n          <div class=\"stack-section\">\r\n            <h4>Call Stack:</h4>\r\n            <div class=\"stack-container\">\r\n              <transition-group name=\"stack-frame\">\r\n                <!-- methodB Frame: Erscheint in Schritt 8-10 -->\r\n                <div v-if=\"currentStep >= 8 && currentStep <= 10\" :key=\"'methodB'\" \r\n                     class=\"stack-frame\" :class=\"{ 'active-frame': currentStep >= 8 && currentStep <= 10 }\">\r\n                  methodB() Frame\r\n                </div>\r\n                \r\n                <!-- methodA Frame: Erscheint in Schritt 5-13 -->\r\n                <div v-if=\"currentStep >= 5 && currentStep <= 13\" :key=\"'methodA'\" \r\n                     class=\"stack-frame\" :class=\"{ 'active-frame': (currentStep >= 5 && currentStep <= 7) || (currentStep >= 11 && currentStep <= 13) }\">\r\n                  methodA() Frame\r\n                </div>\r\n                \r\n                <!-- main Frame: Erscheint in Schritt 2-15 -->\r\n                <div v-if=\"currentStep >= 2 && currentStep <=14\" :key=\"'main'\" \r\n                     class=\"stack-frame\" :class=\"{ 'active-frame': (currentStep >= 2 && currentStep <= 4) || currentStep >= 14 }\">\r\n                  main() Frame\r\n                </div>\r\n              </transition-group>\r\n            </div>\r\n            \r\n            <div class=\"output-console\">\r\n              <h4>Console Output:</h4>\r\n              <pre class=\"console-output\">{{ getConsoleOutput() }}</pre>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        \r\n        <div class=\"demo-controls\">\r\n          <button @click=\"prevStep\" :disabled=\"currentStep <= 1\">Vorheriger Schritt</button>\r\n          <span class=\"step-indicator\">Schritt {{ currentStep }} von {{ totalSteps }}</span>\r\n          <button @click=\"nextStep\" :disabled=\"currentStep >= totalSteps\">Nächster Schritt</button>\r\n        </div>\r\n        \r\n        <div class=\"step-description\">\r\n          <strong>Schritt {{ currentStep }}:</strong> {{ getStepDescription() }}\r\n        </div>\r\n      </div>\r\n      \r\n      <div class=\"important-note\">\r\n        <h4>Wichtig zu wissen:</h4>\r\n        <ul>\r\n          <li><strong>StackOverflowError:</strong> Bei zu vielen verschachtelten Methodenaufrufen (z.B. bei unbegrenzter Rekursion) kann der Call Stack voll werden, was zu einem StackOverflowError führt.</li>\r\n          <li><strong>Thread-spezifisch:</strong> Jeder Thread in Java hat seinen eigenen Call Stack. Daher können mehrere Threads unabhängig voneinander Methoden aufrufen.</li>\r\n          <li><strong>Stack-Größe:</strong> Die maximale Stack-Größe kann in der JVM konfiguriert werden (mit dem Parameter -Xss).</li>\r\n        </ul>\r\n      </div>\r\n      \r\n      <h3>Bedeutung:</h3>\r\n      <p>Der Call Stack ist essentiell für die Nachverfolgung von Methodenaufrufen und ermöglicht die Verschachtelung von Funktionsaufrufen. Bei rekursiven Aufrufen kann der Stack bei zu tiefer Rekursion überlaufen, was zu einem StackOverflowError führt.</p>\r\n    </div>\r\n  </TheoryLayout>\r\n</template>\r\n\r\n<script>\r\nimport TheoryLayout from './TheoryLayout.vue';\r\n\r\nexport default {\r\n  name: 'CallStackTheory',\r\n  components: {\r\n    TheoryLayout\r\n  },\r\n  // Steuert Anzeige von Code, Stack-Frames und Konsolenausgaben\r\n  data() {\r\n    return {\r\n      currentStep: 1,\r\n      totalSteps: 15, \r\n\r\n      // Konsolenausgaben für jeden Schritt\r\n      consoleOutputs: [ \r\n        \"\", // Initialzustand\r\n        \"\", // Schritt 1 \r\n        \"\", // Schritt 2\r\n        \"Start im main\", // Schritt 3: erstes println in main\r\n        \"Start im main\", // Schritt 4 \r\n        \"Start im main\", // Schritt 5\r\n        \"Start im main\\nIn methodA\", // Schritt 6: println in methodA\r\n        \"Start im main\\nIn methodA\", // Schritt 7\r\n        \"Start im main\\nIn methodA\", // Schritt 8\r\n        \"Start im main\\nIn methodA\\nIn methodB\", // Schritt 9: println in methodB\r\n        \"Start im main\\nIn methodA\\nIn methodB\", // Schritt 10\r\n        \"Start im main\\nIn methodA\\nIn methodB\", // Schritt 11\r\n        \"Start im main\\nIn methodA\\nIn methodB\\nZurück in methodA\", // Schritt 12: zweites println in methodA\r\n        \"Start im main\\nIn methodA\\nIn methodB\\nZurück in methodA\", // Schritt 13\r\n        \"Start im main\\nIn methodA\\nIn methodB\\nZurück in methodA\\nZurück in main\", // Schritt 14: zweites println in main\r\n        \"Start im main\\nIn methodA\\nIn methodB\\nZurück in methodA\\nZurück in main\" // Schritt 15\r\n      ],\r\n      // Beschreibungen für jeden Schritt\r\n      stepDescriptions: [\r\n        \"\", // Platzhalter für 0-Index\r\n        \"Programmbeginn - Die Klasse wird geladen.\", // Schritt 1\r\n        \"Die main-Methode wird vorbereitet. Der main-Frame wird auf den Call Stack gelegt.\", // Schritt 2\r\n        \"Die erste Ausgabe in main() wird ausgeführt.\", // Schritt 3\r\n        \"Der Aufruf von methodA() wird vorbereitet.\", // Schritt 4\r\n        \"Die methodA-Definition wird geladen. Der methodA-Frame wird auf den Call Stack gelegt.\", // Schritt 5\r\n        \"Die erste Ausgabe in methodA() wird ausgeführt.\", // Schritt 6\r\n        \"Der Aufruf von methodB() wird vorbereitet.\", // Schritt 7\r\n        \"Die methodB-Definition wird geladen. Der methodB-Frame wird auf den Call Stack gelegt.\", // Schritt 8\r\n        \"Die Ausgabe in methodB() wird ausgeführt.\", // Schritt 9\r\n        \"methodB() ist beendet, der Frame wird vom Stack entfernt.\", // Schritt 10\r\n        \"Die Ausführung kehrt zu methodA() zurück.\", // Schritt 11\r\n        \"Die zweite Ausgabe in methodA() wird ausgeführt.\", // Schritt 12\r\n        \"methodA() ist beendet, der Frame wird vom Stack entfernt.\", // Schritt 13\r\n        \"Die Ausführung kehrt zu main() zurück und die zweite Ausgabe wird ausgeführt.\", // Schritt 14\r\n        \"main() ist beendet, das Programm endet.\" // Schritt 15\r\n      ]\r\n    };\r\n  },\r\n  // Steuert die Navigation durch die Schritte\r\n  methods: {\r\n    // Schritte im Call Stack vorwärts/rückwärts bewegen\r\n    prevStep() {\r\n      if (this.currentStep > 1) {\r\n        this.currentStep--;\r\n      }\r\n    },\r\n    nextStep() {\r\n      if (this.currentStep < this.totalSteps) {\r\n        this.currentStep++;\r\n      }\r\n    },\r\n    // Konsolenausgabe und Schrittbeschreibung für den aktuellen Schritt\r\n    getConsoleOutput() {\r\n      return this.consoleOutputs[Math.min(this.currentStep, this.consoleOutputs.length - 1)];\r\n    },\r\n    getStepDescription() {\r\n      return this.stepDescriptions[this.currentStep];\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.theory-content h2 {\r\n  color: #2c3e50;\r\n  margin-top: 2.5rem;\r\n  font-size: 1.75rem;\r\n  border-left: 5px solid #4361ee;\r\n  padding-left: 1rem;\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.theory-content h3 {\r\n  color: #4361ee;\r\n  margin-top: 1.75rem;\r\n  font-size: 1.4rem;\r\n  border-bottom: 1px solid #e2e8f0;\r\n  padding-bottom: 0.5rem;\r\n}\r\n\r\n.theory-content h4 {\r\n  color: #334155;\r\n  margin-top: 1rem;\r\n  font-size: 1.2rem;\r\n}\r\n\r\n.theory-content ul, .theory-content ol {\r\n  padding-left: 1.5rem;\r\n  margin: 1rem 0;\r\n}\r\n\r\ntheory-content li {\r\n  margin-bottom: 0.5rem;\r\n}\r\n\r\n.theory-content p {\r\n  line-height: 1.7;\r\n  color: #334155;\r\n  margin-bottom: 1rem;\r\n}\r\n\r\n/* Style-Übernahme aus TheoryDetail.vue */\r\n.visual-container, .example-box, .important-note, .animation-placeholder {\r\n  margin: 2rem 0;\r\n  border: 1px solid #e2e8f0;\r\n  border-radius: 0.5rem;\r\n  background-color: #f8fafc;\r\n  box-shadow: 0 2px 4px rgba(0,0,0,0.05);\r\n}\r\n\r\n.visual-fallback pre, .animation-step pre {\r\n  background-color: #f5f5f5;\r\n  padding: 1rem;\r\n  border-radius: 0.5rem;\r\n  font-family: monospace;\r\n  overflow-x: auto;\r\n  line-height: 1.2;\r\n}\r\n\r\n.code-example {\r\n  background-color: #1e1e3f;\r\n  color: #fff;\r\n  padding: 1.25rem;\r\n  border-radius: 6px;\r\n  margin: 1.5rem 0;\r\n  font-family: 'Fira Code', 'Consolas', monospace;\r\n  font-size: 0.95rem;\r\n  line-height: 1.5;\r\n  overflow-x: auto;\r\n  box-shadow: 0 3px 6px rgba(0, 0, 0, 0.1);\r\n  position: relative;\r\n}\r\n\r\n.important-note {\r\n  background-color: #fef2f2;\r\n  border-left: 4px solid #ef4444;\r\n  position: relative;\r\n  padding-left: 3rem;\r\n}\r\n\r\n.animation-step {\r\n  margin-bottom: 1rem;\r\n}\r\n\r\n.step-description {\r\n  font-weight: bold;\r\n  margin-bottom: 0.5rem;\r\n  color: #4361ee;\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .theory-content h2 {\r\n    font-size: 1.5rem;\r\n  }\r\n  \r\n  .theory-content h3 {\r\n    font-size: 1.25rem;\r\n  }\r\n}\r\n\r\n/* Interactive Demo Styles */\r\n.interactive-demo {\r\n  margin-top: 2rem;\r\n  border: 1px solid #e2e8f0;\r\n  border-radius: 8px;\r\n  padding: 1.5rem;\r\n  background-color: #f8fafc;\r\n}\r\n\r\n.demo-container {\r\n  display: flex;\r\n  gap: 1.5rem;\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .demo-container {\r\n    flex-direction: column;\r\n  }\r\n}\r\n\r\n.code-section {\r\n  flex: 1;\r\n  max-width: 50%;\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .code-section {\r\n    max-width: 100%;\r\n  }\r\n}\r\n\r\n.stack-section {\r\n  flex: 1;\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.interactive-code {\r\n  margin-top: 0;\r\n  font-size: 0.9rem;\r\n  line-height: 1.5;\r\n}\r\n\r\n.highlight-code {\r\n  background-color: rgba(67, 97, 238, 0.05);\r\n}\r\n\r\n.highlight-method {\r\n  background-color: rgba(67, 97, 238, 0.2);\r\n  font-weight: bold;\r\n}\r\n\r\n.stack-container {\r\n  background-color: #fff;\r\n  border: 1px solid #e2e8f0;\r\n  border-radius: 6px;\r\n  padding: 1rem;\r\n  min-height: 200px;\r\n  position: relative;\r\n  display: flex;\r\n  flex-direction: column-reverse; /* Stack wächst von unten nach oben */\r\n}\r\n\r\n.stack-frame {\r\n  background-color: #f1f5f9;\r\n  border: 1px solid #cbd5e1;\r\n  border-radius: 4px;\r\n  padding: 0.75rem;\r\n  margin-bottom: 0.5rem;\r\n  transition: all 0.3s ease;\r\n}\r\n\r\n.active-frame {\r\n  background-color: #e0f2fe;\r\n  border-color: #4361ee;\r\n  box-shadow: 0 0 0 2px rgba(67, 97, 238, 0.2);\r\n}\r\n\r\n.output-console {\r\n  margin-top: 1rem;\r\n}\r\n\r\n.console-output {\r\n  background-color: #1e1e3f;\r\n  color: #fff;\r\n  padding: 1rem;\r\n  border-radius: 6px;\r\n  font-family: 'Fira Code', monospace;\r\n  font-size: 0.9rem;\r\n  min-height: 120px;\r\n  white-space: pre-wrap;\r\n}\r\n\r\n.demo-controls {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-top: 1.5rem;\r\n}\r\n\r\n.demo-controls button {\r\n  background-color: #4361ee;\r\n  color: white;\r\n  border: none;\r\n  padding: 0.6rem 1.2rem;\r\n  border-radius: 6px;\r\n  cursor: pointer;\r\n  font-weight: 500;\r\n  transition: background-color 0.2s;\r\n}\r\n\r\n.demo-controls button:hover:not(:disabled) {\r\n  background-color: #3a56d4;\r\n}\r\n\r\n.demo-controls button:disabled {\r\n  background-color: #cbd5e1;\r\n  cursor: not-allowed;\r\n}\r\n\r\n.step-indicator {\r\n  font-weight: 500;\r\n  color: #475569;\r\n}\r\n\r\n.step-description {\r\n  margin-top: 1.5rem;\r\n  padding: 0.75rem;\r\n  background-color: #f8fafc;\r\n  border-left: 4px solid #4361ee;\r\n  color: #334155;\r\n}\r\n\r\n/* Animation für Stack Frames */\r\n.stack-frame-enter-active, .stack-frame-leave-active {\r\n  transition: all 0.5s ease;\r\n}\r\n\r\n.stack-frame-enter-from {\r\n  opacity: 0;\r\n  transform: translateY(-20px);\r\n}\r\n\r\n.stack-frame-leave-to {\r\n  opacity: 0;\r\n  transform: translateY(20px);\r\n}\r\n\r\n/* Zusätzliche Stile für die Methodennamen-Hervorhebung */\r\n.highlight-active-method {\r\n  color: #ff4757; /* Rot für aktive Methode */\r\n  font-weight: bold;\r\n}\r\n\r\n.highlight-in-stack {\r\n  color: #2e86de; /* Blau für Methode im Stack */\r\n  font-weight: bold;\r\n}\r\n</style>\r\n","<template>\r\n  <div class=\"theory-detail\">\r\n    <div class=\"theory-header\">\r\n      <button @click=\"goBack\" class=\"back-button\">&larr; Zurück zur Übersicht</button>\r\n      <h1>{{ title }}</h1>\r\n    </div>\r\n\r\n    <!-- Inner padding wrapper -->\r\n    <div class=\"theory-inner-content\">\r\n      <slot></slot>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'TheoryLayout',\r\n  props: {\r\n    title: {\r\n      type: String,\r\n      required: true\r\n    }\r\n  },\r\n  methods: {\r\n    goBack() {\r\n      this.$router.push({ name: 'theory' })\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n/* Outer container */\r\n.theory-detail {\r\n  padding: 2rem 1rem;\r\n  max-width: min(95vw, 1200px);\r\n  width: 100%;\r\n  margin: 0 auto;\r\n  background-color: white;\r\n  border-radius: 0.5rem;\r\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\r\n  position: relative;\r\n}\r\n\r\n/* Header section */\r\n.theory-header {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: flex-start;\r\n  margin-bottom: 1rem;\r\n}\r\n\r\n.back-button {\r\n  background-color: #f5f5f5;\r\n  border: none;\r\n  padding: 0.75rem 1.25rem;\r\n  border-radius: 0.375rem;\r\n  cursor: pointer;\r\n  font-weight: 500;\r\n  margin-bottom: 1.5rem;\r\n  display: flex;\r\n  align-items: center;\r\n  transition: background-color 0.2s;\r\n}\r\n\r\n.back-button:hover {\r\n  background-color: #e0e0e0;\r\n}\r\n\r\n.theory-detail h1 {\r\n  color: #1e293b;\r\n  font-size: 2.25rem;\r\n  border-bottom: 3px solid #4361ee;\r\n  padding-bottom: 0.75rem;\r\n  margin-bottom: 1.5rem;\r\n  width: 100%;\r\n}\r\n\r\n/* Inner content padding */\r\n.theory-inner-content {\r\n  padding: 0 1.5rem;\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .theory-inner-content {\r\n    padding: 0 1rem;\r\n  }\r\n}\r\n</style>\r\n","import { render } from \"./TheoryLayout.vue?vue&type=template&id=ee09d926\"\nimport script from \"./TheoryLayout.vue?vue&type=script&lang=js\"\nexport * from \"./TheoryLayout.vue?vue&type=script&lang=js\"\n\nimport \"./TheoryLayout.vue?vue&type=style&index=0&id=ee09d926&lang=css\"\n\nimport exportComponent from \"../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { render } from \"./CallStackTheory.vue?vue&type=template&id=3374f7ad&scoped=true\"\nimport script from \"./CallStackTheory.vue?vue&type=script&lang=js\"\nexport * from \"./CallStackTheory.vue?vue&type=script&lang=js\"\n\nimport \"./CallStackTheory.vue?vue&type=style&index=0&id=3374f7ad&scoped=true&lang=css\"\n\nimport exportComponent from \"../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-3374f7ad\"]])\n\nexport default __exports__","<template>\r\n  <TheoryLayout title=\"Memory Stack\">\r\n    <div class=\"theory-content\">\r\n      <h2>Was ist der Memory Stack?</h2>\r\n      <p>Der Memory Stack ist ein spezieller Speicherbereich in Java, der zur Laufzeit zugewiesen wird und primitive Datentypen sowie Referenzen auf Objekte speichert.</p>\r\n\r\n      <div class=\"visual-container\">\r\n        <div class=\"visual-fallback\">\r\n          <pre>\r\n┌────────────────────────────┐\r\n│ Stack Frame: main()        │\r\n│                            │\r\n│ int x = 5                  │\r\n│ boolean flag = true        │\r\n│ Student s1 → [Heap: 0x1A2] │\r\n└────────────────────────────┘\r\n          </pre>\r\n        </div>\r\n      </div>\r\n\r\n      <h3>Inhalte des Memory Stack:</h3>\r\n      <div class=\"content-grid\">\r\n          <ul>\r\n            <li>Primitive Variablen (int, boolean, float, etc.)</li>\r\n            <li>Referenzvariablen (Zeiger auf Objekte im Heap)</li>\r\n            <li>Methodenparameter</li>\r\n            <li>Rückgabewerte</li>\r\n            <li>Temporäre Zwischenergebnisse von Berechnungen</li>\r\n          </ul>\r\n      </div>\r\n\r\n      <h3>Eigenschaften des Memory Stacks:</h3>\r\n      <div class=\"content-grid\">\r\n        <div class=\"content-item\">\r\n          <h4>Automatische Verwaltung</h4>\r\n          <p>Variablen werden erstellt und gelöscht, wenn Methoden aufgerufen und beendet werden.</p>\r\n        </div>\r\n        <div class=\"content-item\">\r\n          <h4>Lebensdauer</h4>\r\n          <p>Nur während der Methodenausführung vorhanden, danach wird der Speicher freigegeben.</p>\r\n        </div>\r\n        <div class=\"content-item\">\r\n          <h4>Geschwindigkeit</h4>\r\n          <p>Schneller Zugriff durch das LIFO-Prinzip und vorhersehbare Allokation.</p>\r\n        </div>\r\n        <div class=\"content-item\">\r\n          <h4>Begrenzte Größe</h4>\r\n          <p>Festgelegt bei JVM-Start. Überschreitung führt zum StackOverflowError.</p>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"example-box\">\r\n        <h4>Praktisches Beispiel:</h4>\r\n        <pre class=\"code-example\">\r\npublic class StackExample {\r\n    public static void main(String[] args) {\r\n        int number = 42;\r\n        boolean isActive = true;\r\n        double pi = 3.14159;\r\n        String text = \"Hallo Welt\";\r\n        int[] numbers = {1, 2, 3, 4, 5};\r\n        int result = calculate(number);\r\n    }\r\n\r\n    public static int calculate(int input) {\r\n        int squared = input * input;\r\n        return squared;\r\n    }\r\n}</pre>\r\n\r\n        <div class=\"example-explanation\">\r\n          <p><strong>Stack-Status während der Ausführung:</strong></p>\r\n          <pre>\r\n┌────────────────────────────────┐\r\n│ Stack Frame: calculate()       │\r\n│ input = 42                     │\r\n│ squared = 1764                 │\r\n├────────────────────────────────┤\r\n│ Stack Frame: main()            │\r\n│ number = 42                    │\r\n│ isActive = true                │\r\n│ pi = 3.14159                   │\r\n│ text → [Heap: String-Objekt]   │\r\n│ numbers → [Heap: Array-Objekt] │\r\n│ result = ?                     │\r\n└────────────────────────────────┘\r\n          </pre>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"flex-container\">\r\n        <div class=\"important-note\">\r\n          <h4>Wichtig zu wissen:</h4>\r\n          <ul>\r\n            <li><strong>Primitive vs. Referenzen:</strong> Primitive Werte liegen direkt im Stack. Referenzen zeigen auf Heap-Objekte.</li>\r\n            <li><strong>Stack pro Thread:</strong> Jeder Thread hat seinen eigenen Stack.</li>\r\n            <li><strong>Kein Garbage Collection:</strong> Speicher wird automatisch freigegeben.</li>\r\n          </ul>\r\n        </div>\r\n\r\n        <div class=\"summary-section\">\r\n          <h3>Zusammenfassung:</h3>\r\n          <p>Der Memory Stack ist zuständig für die Verwaltung von lokalen Variablen und Methodenaufrufen. Durch seine automatische Speicherverwaltung und hohe Geschwindigkeit ist er ein zentraler Bestandteil der JVM-Laufzeitumgebung.</p>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"comparison-section\">\r\n        <h3>Stack vs. Heap im Überblick:</h3>\r\n        <div class=\"table-container\">\r\n          <table class=\"comparison-table\">\r\n            <thead>\r\n              <tr>\r\n                <th>Eigenschaft</th>\r\n                <th>Stack</th>\r\n                <th>Heap</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              <tr>\r\n                <td><strong>Gespeicherte Daten</strong></td>\r\n                <td>Primitive Typen, Referenzen</td>\r\n                <td>Objekte, Arrays, Strings</td>\r\n              </tr>\r\n              <tr>\r\n                <td><strong>Lebensdauer</strong></td>\r\n                <td>Während Methodenausführung</td>\r\n                <td>Bis keine Referenzen mehr existieren</td>\r\n              </tr>\r\n              <tr>\r\n                <td><strong>Zugriff</strong></td>\r\n                <td>Jeder hat zugriff auf alles im Heap</td>\r\n                <td>Zugriff nur auf eigenen Stack-Frame (Funktionsbereich)</td>\r\n              </tr>\r\n              <tr>\r\n                <td><strong>Speicherfreigabe</strong></td>\r\n                <td>Automatisch (LIFO)</td>\r\n                <td>Garbage Collector</td>\r\n              </tr>\r\n              <tr>\r\n                <td><strong>Grösse</strong></td>\r\n                <td>Fest vorgegeben</td>\r\n                <td>Dynamisch (kann wachsen)</td>\r\n              </tr>\r\n              <tr>\r\n                <td><strong>Zugriffsgeschwindigkeit</strong></td>\r\n                <td>Sehr schnell, ist kleiner</td>\r\n                <td>Langsamer als Stack, ist grösser, muss durchsucht werden</td>\r\n              </tr>\r\n              <tr>\r\n                <td><strong>Fehler bei Überlauf</strong></td>\r\n                <td>StackOverflowError</td>\r\n                <td>OutOfMemoryError</td>\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </TheoryLayout>\r\n</template>\r\n\r\n<script>\r\nimport TheoryLayout from './TheoryLayout.vue';\r\n\r\nexport default {\r\n  name: 'MemoryStackTheory',\r\n  components: {\r\n    TheoryLayout\r\n  },\r\n  mounted() {\r\n    // Hier können spezifische JavaScript-Funktionalitäten für diese Komponente initialisiert werden\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.theory-content h2 {\r\n  color: #2c3e50;\r\n  margin-top: 2.5rem;\r\n  font-size: 1.75rem;\r\n  border-left: 5px solid #4361ee;\r\n  padding-left: 1rem;\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.theory-content h3 {\r\n  color: #4361ee;\r\n  margin-top: 1.75rem;\r\n  font-size: 1.4rem;\r\n  border-bottom: 1px solid #e2e8f0;\r\n  padding-bottom: 0.5rem;\r\n}\r\n\r\n.theory-content h4 {\r\n  color: #334155;\r\n  margin-top: 0.5rem;\r\n  margin-bottom: 0.5rem;\r\n  font-size: 1.1rem;\r\n}\r\n\r\n.theory-content ul, .theory-content ol {\r\n  padding-left: 1.5rem;\r\n  margin: 1rem 0;\r\n}\r\n\r\n.theory-content li {\r\n  margin-bottom: 0.5rem;\r\n}\r\n\r\n.theory-content p {\r\n  line-height: 1.7;\r\n  color: #334155;\r\n  margin-bottom: 1rem;\r\n}\r\n\r\n.visual-container, .example-box, .important-note, .animation-placeholder {\r\n  margin: 2rem 0;\r\n  padding: 1rem;\r\n  border: 1px solid #e2e8f0;\r\n  border-radius: 0.5rem;\r\n  background-color: #f8fafc;\r\n  box-shadow: 0 2px 4px rgba(0,0,0,0.05);\r\n}\r\n\r\n.visual-fallback pre, .animation-step pre {\r\n  background-color: #f5f5f5;\r\n  padding: 1rem;\r\n  border-radius: 0.5rem;\r\n  font-family: monospace;\r\n  overflow-x: auto;\r\n  line-height: 1.2;\r\n}\r\n\r\n.code-example {\r\n  background-color: #1e1e3f;\r\n  color: #fff;\r\n  padding: 1.25rem;\r\n  border-radius: 6px;\r\n  margin: 1.5rem 0;\r\n  font-family: 'Fira Code', 'Consolas', monospace;\r\n  font-size: 0.95rem;\r\n  line-height: 1.5;\r\n  overflow-x: auto;\r\n  box-shadow: 0 3px 6px rgba(0, 0, 0, 0.1);\r\n  position: relative;\r\n}\r\n\r\n.important-note {\r\n  background-color: #fef2f2;\r\n  border-left: 3px solid #ef4444;\r\n  padding: 0.75rem 0.75rem 0.75rem 1rem;\r\n  margin: 1rem 0;\r\n  border-radius: 0.5rem;\r\n  flex: 1;\r\n}\r\n\r\n.summary-section {\r\n  background-color: #f0f4ff;\r\n  border-left: 3px solid #4361ee;\r\n  padding: 0.75rem 0.75rem 0.75rem 1rem;\r\n  margin: 1rem 0;\r\n  border-radius: 0.5rem;\r\n  flex: 1;\r\n}\r\n\r\n.content-grid {\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));\r\n  gap: 1rem;\r\n  margin: 1rem;\r\n}\r\n\r\n.content-item {\r\n  background-color: #f8fafc;\r\n  padding: 0.75rem;\r\n  border-radius: 0.5rem;\r\n  border: 1px solid #e2e8f0;\r\n}\r\n\r\n.comparison-section {\r\n  margin: 1.5rem 0;\r\n}\r\n\r\n.table-container {\r\n  overflow-x: auto;\r\n  margin: 0.75rem 0;\r\n}\r\n\r\n.comparison-table {\r\n  width: 100%;\r\n  border-collapse: collapse;\r\n  font-size: 0.9rem;\r\n}\r\n\r\n.comparison-table th {\r\n  background-color: #4361ee;\r\n  color: white;\r\n  text-align: left;\r\n  padding: 0.5rem 0.75rem;\r\n}\r\n\r\n.comparison-table td {\r\n  border: 1px solid #e2e8f0;\r\n  padding: 0.5rem 0.75rem;\r\n}\r\n\r\n.comparison-table tr:nth-child(even) {\r\n  background-color: #f8fafc;\r\n}\r\n\r\n.flex-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 1rem;\r\n  margin: 1.5rem 0;\r\n}\r\n\r\n@media (min-width: 768px) {\r\n  .flex-container {\r\n    flex-direction: row;\r\n  }\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .theory-content h2 {\r\n    font-size: 1.5rem;\r\n  }\r\n\r\n  .theory-content h3 {\r\n    font-size: 1.25rem;\r\n  }\r\n\r\n  .visual-fallback pre {\r\n    font-size: 0.85rem;\r\n  }\r\n\r\n  .flex-container {\r\n    flex-direction: column;\r\n  }\r\n}\r\n</style>\r\n","import { render } from \"./MemoryStackTheory.vue?vue&type=template&id=78f531b8&scoped=true\"\nimport script from \"./MemoryStackTheory.vue?vue&type=script&lang=js\"\nexport * from \"./MemoryStackTheory.vue?vue&type=script&lang=js\"\n\nimport \"./MemoryStackTheory.vue?vue&type=style&index=0&id=78f531b8&scoped=true&lang=css\"\n\nimport exportComponent from \"../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-78f531b8\"]])\n\nexport default __exports__","<template>\r\n  <TheoryLayout title=\"Memory Heap\">\r\n    <div class=\"theory-content\">\r\n      <h2>Was ist der Memory Heap?</h2>\r\n      <p>Der Memory Heap ist ein dynamischer Speicherbereich, der von JVM verwaltet wird. In ihm werden Arrays und Objekte von Klassen zur Laufzeit dynamisch erstellt und verwaltet.</p>\r\n      <p>Anders als der Stack, der nur temporäre Werte speichert, speichert der Heap die Daten langfristig.</p>\r\n      \r\n      <div class=\"analogy-box\">\r\n        <h3>Alltagsbeispiel</h3>\r\n        <p>Stell dir den Heap wie eine grosse Bücherei vor, und den Stack wie deinen Schreibtisch:</p>\r\n        <ul>\r\n          <li><strong>Die Bücherei (Heap):</strong> Ein riesiger, gemeinsamer Raum, in dem alle Bücher (Objekte) aufbewahrt werden. Wenn die Bücherei ein neues Buch kauf (ein Objekt erstellst), wird es dort in den Regalen eingeordnet. Die Bücher bleiben so lange dort, bis sie niemand mehr braucht (keine Referenz mehr).</li>\r\n          <li><strong>Dein Schreibtisch (Stack):</strong> Ein kleiner, persönlicher Bereich, auf dem du schnell Notizen (primitive Variablen) machst oder Liste von Büchern (Referenzen) ablegst, die du von der Bücherei ausleihen willst. Verlässt du den Raum (Methode endet), wird dein Schreibtisch komplett abgeräumt, du siehst ihn nicht mehr.</li>\r\n        </ul>\r\n        <p>Da der Stack viel kleiner ist, als der Heap ist im Stack jeweils nur eine Referenz auf die Speicheradresse im Heap hinterlegt, wo sich das Objekt befindet.</p>\r\n      </div>\r\n\r\n      <div class=\"object-creation-section\">\r\n        <h3>Objekte im Heap: Neue Bücher in der Bücherei</h3>\r\n        <p>Der Heap speichert alle Objekte, die mit <code>new</code> erstellt werden, sowie ihre Instanzvariablen.</p>\r\n        \r\n        <div class=\"two-column-layout\">\r\n          <div class=\"column\">\r\n            <pre class=\"code-example\">\r\nclass Buch {\r\n    int seitenzahl;\r\n}\r\n\r\npublic class Main {\r\n    public static void main(String[] args) {\r\n        Buch meinBuch = new Buch();  // Speicherzuweisung im Heap\r\n        meinBuch.seitenzahl = 350; // Referenz auf das Buch im Heap\r\n    }\r\n}</pre>\r\n          </div>\r\n          \r\n          <div class=\"column\">\r\n            <div class=\"explanation-box\">\r\n              <ul>\r\n                <li>Mit <code>new</code> wird ein neues <strong>Buch-Objekt</strong> erstellt.\r\n                  Das ist wie ein neues Buch, das in der Bücherei (Heap) eingeordnet wird</li>\r\n                <li>Die Variable <strong>meinBuch</strong> liegt im Stack und enthält eine Referenz auf das Buch im Heap.\r\n                  Das ist wie ein Ausleihzettel (im Stack), der auf das Buch im Regal zeigt.</li>\r\n                <li>Die Eigenschaft <strong>seitenzahl</strong> ist eine Instanzvariable des Objekts.\r\n                  Das ist wie die Anzahl der Seiten im Buch. Der Wert <strong>350</strong> wird direkt im Buch gespeichert, man sieht erst wie viele Seitenzahlen das Buch hat wenn man es öffnet.</li>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"two-column-layout align-items-start\">\r\n        <div class=\"column\">\r\n          <div class=\"content-box\">\r\n            <h3>Inhalte des Heaps:</h3>\r\n            <ul>\r\n              <li><strong>Objekte:</strong> Instanzen von Klassen (neue Objekte mit <code>new</code> erstellt)</li>\r\n              <li><strong>Arrays:</strong> Auch wenn sie primitive Werte enthalten, ist das Array-Objekt selbst im Heap</li>\r\n              <li><strong>Strings:</strong> String-Objekte werden im Heap gespeichert (mit String-Pool-Optimierungen)</li>\r\n              <li><strong>Komplexe Datenstrukturen:</strong> Listen, Maps und alle anderen Kollektionen</li>\r\n              <li><strong>Klasseninstanzen</strong> mit ihren Instanzvariablen</li>\r\n              <li><strong>Instanzvariablen:</strong> Die Felder/Attribute eines Objekts</li>\r\n            </ul>\r\n          </div>\r\n        </div>  \r\n        \r\n        <div class=\"column\">\r\n          <div class=\"visual-container\">\r\n        <div class=\"visual-fallback\">\r\n          <pre>\r\n┌──────────────────────────────┐\r\n│            HEAP              │\r\n│                              │\r\n│  ┌───────────┐  ┌──────────┐ │\r\n│  │ String    │  │ Person   │ │\r\n│  │ \"Hallo\"   │  │name=\"Max\"│ │\r\n│  └───────────┘  │alter=25  │ │\r\n│                 └──────────┘ │\r\n│  ┌───────────┐               │\r\n│  │ int[]     │  ┌──────────┐ │\r\n│  │ [3,1,4,2] │  │ ArrayList│ │\r\n│  └───────────┘  └──────────┘ │\r\n│                              │\r\n└──────────────────────────────┘\r\n          </pre>\r\n        </div>\r\n      </div>\r\n        </div>   \r\n      </div>\r\n      \r\n        \r\n      <div class=\"example-box\">\r\n        <h4>Praktisches Bücherei-Beispiel:</h4>\r\n        <p>Denk an ein Bibliotheks-Management-System. Hier sehen wir, wie verschiedene Informationen im Heap gespeichert werden:</p>\r\n        <pre class=\"code-example\">\r\npublic class BibliothekenBeispiel {\r\n    public static void main(String[] args) {\r\n        // Ein Buch-Objekt wird im Heap erstellt\r\n        Buch buch1 = new Buch(\"Java für Anfänger\", \"Programmierung\");\r\n        \r\n        // Ein weiteres Buch im Heap\r\n        Buch buch2 = new Buch(\"Algorithmen verstehen\", \"Informatik\");\r\n        \r\n        // Array mit Bewertungen - das Array selbst ist ein Objekt im Heap\r\n        double[] bewertungen = {3.8, 4.2, 4.5, 5.0};\r\n        \r\n        // Die ArrayList ist ein Objekt im Heap\r\n        ArrayList&lt;String&gt; ausleiher = new ArrayList&lt;&gt;();\r\n        ausleiher.add(\"Max Mustermann\"); // Jeder String ist auch ein Objekt im Heap\r\n        ausleiher.add(\"Lisa Schmidt\");\r\n        \r\n        // Bibliothek-Objekt mit Buch-Referenzen\r\n        Bibliothek bibliothek = new Bibliothek(\"Stadtbibliothek\");\r\n        bibliothek.addBuch(buch1);\r\n        bibliothek.addBuch(buch2);\r\n        \r\n        // Methode beenden: buch1, buch2, bewertungen, ausleiher und bibliothek \r\n        // bleiben im Heap, solange Referenzen bestehen\r\n    }\r\n}\r\n\r\nclass Buch {\r\n    private String titel;    // Referenz zu einem String im Heap\r\n    private String kategorie; // Referenz zu einem String im Heap\r\n    \r\n    public Buch(String titel, String kategorie) {\r\n        this.titel = titel;\r\n        this.kategorie = kategorie;\r\n    }\r\n}\r\n\r\nclass Bibliothek {\r\n    private String name;\r\n    private List&lt;Buch&gt; bücher = new ArrayList&lt;&gt;();\r\n    \r\n    public Bibliothek(String name) {\r\n        this.name = name;\r\n    }\r\n    \r\n    public void addBuch(Buch buch) {\r\n        bücher.add(buch);\r\n    }\r\n}</pre>\r\n\r\n        <div class=\"heap-visualization\">\r\n          <p><strong>So sieht der Heap-Speicher (unsere Bücherei) dafür aus:</strong></p>\r\n          <pre>\r\nBÜCHEREI (HEAP):\r\n┌──────────────────────────────────────────────────────────┐\r\n│                                                          │\r\n│  ┌──────────┐      ┌───────────────────┐ ┌───────────┐   │\r\n│  │ Buch     │      │ String            │ │ String    │   │\r\n│  │ titel  ──┼─────▶│ \"Java für         │ │ \"Program- │   │\r\n│  │ kateg. ──┼─────▶│  Anfänger\"        │ │  mierung\" │   │\r\n│  └──────────┘      └───────────────────┘ └───────────┘   │\r\n│                                                          │\r\n│  ┌──────────┐      ┌───────────────────┐ ┌───────────┐   │\r\n│  │ Buch     │      │ String            │ │ String    │   │\r\n│  │ titel  ──┼─────▶│ \"Algorithmen      │ │ \"Informatik\"  │\r\n│  │ kateg. ──┼─────▶│  verstehen\"       │ │           │   │\r\n│  └──────────┘      └───────────────────┘ └───────────┘   │\r\n│                                                          │\r\n│  ┌──────────┐                                            │\r\n│  │ double[] │                                            │\r\n│  │ [3.8,    │                                            │\r\n│  │  4.2,    │                                            │\r\n│  │  4.5,    │                                            │\r\n│  │  5.0]    │                                            │\r\n│  └──────────┘                                            │\r\n│                                                          │\r\n│  ┌────────────┐    ┌────────────────────┐ ┌───────────┐  │\r\n│  │ ArrayList  │    │ String             │ │ String    │  │\r\n│  │ size=2     │    | \"Max Mustermann\"   │ │ \"Lisa     │  │\r\n│  │ elements───┼───▶│                    │ │  Schmidt\" │  │\r\n│  └────────────┘    └────────────────────┘ └───────────┘  │\r\n│                                                          │\r\n│  ┌────────────┐    ┌─────────────────────┐               │\r\n│  │ Bibliothek │    │ String              │               │\r\n│  │ name    ───┼───▶│ \"Stadtbibliothek\"   │               │\r\n│  │ bücher     │    └─────────────────────┘               │\r\n│  │ (Liste mit │                                          │\r\n│  │ Referenzen)│                                          │\r\n│  └────────────┘                                          │\r\n└──────────────────────────────────────────────────────────┘\r\n          </pre>\r\n        </div>\r\n        \r\n        <div class=\"explanation-box\">\r\n          <ul>\r\n            <li>\r\n              <p>Die mit <code>new</code> erstellten <strong>Buch-Objekte</strong> <code>buch1</code> und <code>buch2</code> sind eigenständige Objekte im Heap-Speicher.</p>\r\n              <p>Jedes dieser Objekte besitzt Instanzvariablen, die als Referenzen auf die zugehörigen String-Objekte im Heap verweisen.</p>\r\n              <p>Zum Beispiel:</p>\r\n              <p>Das Buch-Objekt <code>buch1</code> enthält eine Referenz auf den Titel <strong>\"Java für Anfänger\"</strong> sowie auf die Kategorie <strong>\"Programmierung\"</strong>.</p>\r\n              <p>Das Buch-Objekt <code>buch2</code> verweist entsprechend auf <strong>\"Algorithmen verstehen\"</strong> und <strong>\"Informatik\"</strong>.</p>\r\n              <p>Diese Buch-Objekte kann man sich wie Bücher in einer Bibliothek vorstellen:</p>\r\n              <p>Sie werden ins Regal gestellt (Heap), wo sie physisch vorhanden sind.</p>\r\n              <p>Die Ausleihzettel (Referenzen) liegen im Verwaltungssystem (Stack), sodass man jederzeit auf die Bücher zugreifen kann.</p>\r\n            </li>\r\n            \r\n            <li>\r\n              <p>Die mit <code>new</code> erzeugte <strong>ArrayList</strong> <code>ausleiher</code> ist ebenfalls ein Objekt im Heap.</p>\r\n              <p>Sie speichert Referenzen auf String-Objekte, die die Namen der Personen enthalten, die Bücher ausgeliehen haben.</p>\r\n              <p>In diesem Fall zeigt die Liste auf die Strings <strong>\"Max Mustermann\"</strong> und <strong>\"Lisa Schmidt\"</strong>, die ebenfalls im Heap liegen.</p>\r\n              <p>Dies entspricht einer Liste der Leser in der Bibliothek, die registriert sind und Bücher ausgeliehen haben.</p>\r\n            </li>\r\n            \r\n            <li>\r\n              <p>Das <strong>Array</strong> <code>bewertungen</code> ist ein weiteres Objekt im Heap, das Bewertungen der Bücher speichert.</p>\r\n              <p>Es enthält double-Werte wie [3.8, 4.2, 4.5, 5.0].</p>\r\n              <p>Da Arrays in Java ebenfalls Objekte im Heap sind, wird das Array als Ganzes dort abgelegt.</p>\r\n              <p>Dies kann man sich vorstellen wie einen Bewertungsbogen, der die Lesermeinungen über Bücher sammelt.</p>\r\n            </li>\r\n            \r\n            <li>\r\n              <p>Das <strong>Bibliothek-Objekt</strong> <code>bibliothek</code> wird ebenfalls mit <code>new</code> erstellt und im Heap gespeichert.</p>\r\n              <p>Es speichert den Namen \"Stadtbibliothek\" als Referenz auf ein String-Objekt im Heap.</p>\r\n              <p>Zusätzlich enthält es eine Liste von Buch-Referenzen, die auf <code>buch1</code> und <code>buch2</code> zeigen.</p>\r\n              <p>Diese Klasse ist vergleichbar mit dem Verwaltungssystem der Bibliothek, das den Bestand der Bücher organisiert.</p>\r\n            </li>\r\n          </ul>\r\n          \r\n          <h4>Zusammenfassung (Metapher)</h4>\r\n          <ul>\r\n            <li>Buch-Objekte (<code>buch1</code>, <code>buch2</code>) sind echte Bücher im Regal der Bibliothek (Heap).</li>\r\n            <li>Titel und Kategorien sind Beschriftungen und Genres der Bücher.</li>\r\n            <li>Array für Bewertungen ist ein Bewertungsbogen, der Lesermeinungen speichert.</li>\r\n            <li>ArrayList der Ausleiher ist eine Liste der Leser, die Bücher ausgeliehen haben.</li>\r\n            <li>Bibliothek-Objekt entspricht dem Verwaltungssystem, das alle Bücher katalogisiert.</li>\r\n            <li>Referenzvariablen im Stack (z. B. <code>buch1</code>, <code>buch2</code>) sind Ausleihzettel, die zeigen, wo die Bücher im Regal stehen.</li>\r\n          </ul>\r\n\r\n          <ul>\r\n            <li><p>Die <strong>Buch-Objekte</strong> \"buch1\", \"buch2\" die mit <code>new</code> erstellt wurden, sind eigene Objekte im Heap.</p>\r\n              <p>Jedes dieser Objekte enthält die Instanzvariablen mit der Referenz auf den entsprechenden String.</p>\r\n              <p>Beispielsweise enthält das Buch-Objekt \"buch1\" die Referenz auf den String \"Java für Anfänger\" und die Kategorie \"Programmierung\".</p>\r\n            <p>Es sind wie Bücher, die in ein Regal der Bücherei gestellt werden, damit man sie ansehen kann.</p></li>\r\n            <li>Die <strong>Bibliothek-Klasse</strong> ist wie das Verwaltungssystem der Bücherei</li>\r\n            <li>Die <strong>Titel und Kategorien</strong> sind wie Beschriftungen und Genres der Bücher</li>\r\n            <li>Das <strong>Bewertungs-Array</strong> ist wie ein Bewertungsbogen für Bücher</li>\r\n            <li>Die <strong>ArrayList</strong> für Ausleiher ist wie eine Liste der Leser, die Bücher ausgeliehen haben</li>\r\n          </ul>\r\n          <p>Wenn die <code>main</code>-Methode endet, bleiben alle Bücher und Informationen im Heap (der Bücherei), solange noch Referenzen darauf existieren. Erst wenn keine \"Ausleihzettel\" (Referenzen) mehr vorhanden sind, kann der Bibliothekar (Garbage Collector) die Bücher aussortieren.</p>\r\n        </div>\r\n      </div>\r\n      \r\n      \r\n      \r\n      <h3>String-Pool: Eine Besonderheit im Heap</h3>\r\n      <div class=\"two-column-layout\">\r\n        <div class=\"column\">\r\n          <div class=\"string-pool\">\r\n            <p>Java optimiert die Speicherung von Strings durch einen speziellen Bereich im Heap, den String-Pool:</p>\r\n            <p>Stell dir den String-Pool wie ein besonderes Bücherregal nur für häufig verwendete Bücher vor:</p>\r\n            <pre class=\"code-example\">\r\nString s1 = \"Java\";       // Wird im String-Pool abgelegt\r\nString s2 = \"Java\";       // Greift auf das gleiche Buch im Pool zu\r\nString s3 = new String(\"Java\");  // Erstellt eine neue Kopie des Buches ausserhalb des Pools\r\n\r\nSystem.out.println(s1 == s2);     // true - beide haben denselben Ausweis\r\nSystem.out.println(s1 == s3);     // false - unterschiedliche Ausweise\r\nSystem.out.println(s1.equals(s3)); // true - gleicher Inhalt, aber verschiedene Exemplare</pre>\r\n\r\n            <p>Mit dem befehl new String, kann im Heap ein String ausserhalb des String-Pools erstellt werden. Das ist, als würden zwei Studenten (s1 und s2) das gleiche Bibliotheksbuch ausleihen, während ein dritter (s3) eine private Kopie kauft.</p>\r\n          </div>\r\n        </div>\r\n        \r\n        <div class=\"column\">\r\n          <div class=\"visual-container\">\r\n            <div class=\"visual-fallback\">\r\n              <pre>\r\nHEAP:\r\n┌─────────────────────────────────┐\r\n│                                 │\r\n│ ┌───────────────────┐           │\r\n│ │    String-Pool    │           │\r\n│ │  ┌─────────────┐  │           │\r\n│ │  │   \"Java\"    │◀─┼──── s1    │\r\n│ │  └─────────────┘  │      s2   │\r\n│ │                   │           │\r\n│ └───────────────────┘           │\r\n│                                 │\r\n│                                 │\r\n│ ┌─────────────────┐             │\r\n│ │     \"Java\"      │◀─────── s3  │\r\n│ └─────────────────┘             │\r\n│                                 │\r\n└─────────────────────────────────┘\r\n              </pre>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      \r\n\r\n      <div class=\"heap-stack-connection\">\r\n        <h3>Wie sind Heap und Stack verknüpft?</h3>\r\n        \r\n        <div class=\"explanation-box\">\r\n          <ul>\r\n            <li><strong>Lokale Variablen</strong> (primitive Typen & Referenzen) sind wie Notizen auf deinem persönlichen Zettel (Stack)</li>\r\n            <li><strong>Objekte und Instanzvariablen</strong> sind wie die Bücher selbst und ihre Inhalte (im Heap)</li>\r\n            <li><strong>Methodenende:</strong> Wenn du den Leseraum verlässt (Methode endet), wird dein Notizzettel weggeworfen (Stack-Frame gelöscht), aber die Bücher bleiben in den Regalen (Heap), solange noch jemand einen Ausleihzettel dafür hat</li>\r\n          </ul>\r\n          <p>Das bedeutet: Solange ein Buch (Objekt oder Array) noch von irgendjemandem gelesen wird (eine Referenz hat), bleibt es in der Bücherei (Heap). Erst wenn niemand mehr darauf verweist, kann es aussortiert werden.</p>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"gc-example\">\r\n        <h4>Speicherfreigabe durch den Bibliothekar (Garbage Collector)</h4>\r\n        <p>Beim Heap wird der Speicher nicht mehr verwendeter Objekte automatisch vom Garbage Collector freigegeben. Das bedeutet, wenn im Code keine Referenz mehr auf ein Objekt verweist, wird es als \"unreachable\" (unerreichbar) markiert und entfernt.</p>\r\n        \r\n        <div class=\"two-column-layout\">\r\n          <div class=\"column\">\r\n            <pre class=\"code-example\">\r\npublic class GCBeispiel {\r\n    public static void main(String[] args) {\r\n        // Buch wird erstellt und im Heap abgelegt\r\n        Buch javaBuch = new Buch(\"Java Grundlagen\");\r\n        \r\n        System.out.println(javaBuch.titel);\r\n        \r\n        // Referenz wird überschrieben\r\n        javaBuch = new Buch(\"Java Fortgeschritten\");\r\n        \r\n        // Das erste Buch hat keine Referenz mehr\r\n        // und ist bereit für den Garbage Collector\r\n    }\r\n}\r\n\r\nclass Buch {\r\n    String titel;\r\n    \r\n    public Buch(String titel) {\r\n        this.titel = titel;\r\n    }\r\n}</pre>\r\n          </div>\r\n          \r\n          <div class=\"column\">\r\n            <div class=\"visual-container\">\r\n              <div class=\"visual-fallback\">\r\n                <pre>\r\nVor der Neuzuweisung:      Nach der Neuzuweisung:\r\n┌──────────────┐           ┌───────────────────┐\r\n│ javaBuch     │           │ javaBuch          │\r\n└──────┬───────┘           └─────────┬─────────┘\r\n       │                             │\r\n       ▼                             ▼\r\n┌──────────────┐           ┌───────────────────┐\r\n│ Buch         │           │ Buch              │\r\n│\"Java         │           │\"Java              │\r\n│ Grundlagen\"  │           │ Fortgeschritten\"  │\r\n└──────────────┘           └───────────────────┘\r\n                          \r\n                           ┌───────────────────┐\r\n                           │ Buch              │\r\n                           │\"Java Grundlagen\"  │\r\n                           │(keine Referenz)   │\r\n                           │→ GC bereit        │\r\n                           └───────────────────┘</pre>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"gc-section\">\r\n        <h3>Heap-Speicherverwaltung und Garbage Collection:</h3>\r\n        <p>Anders als der Stack wird der Heap nicht automatisch bei Methodenenden aufgeräumt. Java nutzt die Garbage Collection, einen automatischen Prozess, der nicht mehr benötigten Speicher im Heap freigibt.</p>\r\n        \r\n        <div class=\"two-column-layout align-items-start\">\r\n          <div class=\"column\">          \r\n            <div class=\"gc-explanation\">\r\n              <h4>So funktioniert Garbage Collection - in Alltagsbegriffen:</h4>\r\n              <p>Stell dir vor, der Heap ist eine große Bibliothek und der Garbage Collector ein fleißiger Bibliothekar:</p>\r\n              <ol>\r\n                <li><strong>Identifikation:</strong> Der Bibliothekar prüft, welche Bücher (Objekte) keine Ausweise (Referenzen) mehr haben, die auf sie zeigen.</li>\r\n                <li><strong>Markieren:</strong> Bücher, die noch von jemandem ausgeliehen werden könnten (erreichbare Objekte), bekommen ein Lesezeichen.</li>\r\n                <li><strong>Aussortieren/Löschen:</strong> Bücher ohne Lesezeichen (nicht erreichbare Objekte) werden aus den Regalen entfernt.</li>\r\n                <li><strong>Neu ordnen:</strong> Die Regale werden neu geordnet, um Platz zu schaffen (Speicherkomprimierung).</li>\r\n              </ol>\r\n              <p>Dieser Prozess geschieht automatisch und in regelmäßigen Abständen, aber kann manchmal zu kurzen Pausen in der Programmausführung führen - ähnlich wie wenn die Bibliothek kurz schließt, um aufzuräumen.</p>\r\n            </div>\r\n          </div>\r\n          \r\n          <div class=\"column\">\r\n            <div class=\"visual-container gc-visual\">\r\n              <div class=\"visual-fallback\">\r\n                <pre>\r\nVor GC:              Nach GC:\r\n┌────────┐           ┌────────┐\r\n│ Obj A  │◀───┐      │ Obj A  │◀───┐\r\n└────────┘    │      └────────┘     │\r\n              │                     │\r\n┌────────┐    │      ┌────────┐     │\r\n│ Obj B  │    │      │ Obj C  │     │\r\n└────────┘    │      └────────┘     │\r\n              │                     │\r\n┌────────┐    │                     │\r\n│ Obj C  │◀───┼─────Referenz        │\r\n└────────┘    │                     │\r\n              │                     │\r\n┌────────┐    │      (Obj B wurde   │\r\n│ Obj D  │    │      freigegeben,   │\r\n└────────┘    │      Obj D auch)    │\r\n              │                     │\r\nReferenzen────┘      Referenzen─────┘\r\n                </pre>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"memory-leaks-detail\">\r\n        <h3>Memory Leaks</h3>\r\n        <p>Wenn Objekte unnötig referenziert bleiben und somit nicht gelöscht werden können, obwohl sie nicht mehr gebraucht werden, spricht man von einem Memory Leak (Speicherleck).</p>\r\n        \r\n        <div class=\"example-box\">\r\n          <h4>Alltagsbeispiel</h4>\r\n          <p>Stell dir vor, ein Student hat einen Ausleihzettel für ein Fachbuch, das er längst nicht mehr liest. Er hat den Zettel in einer Schublade vergessen und verlässt die Universität. Das Buch bleibt in der Bücherei und belegt wertvollen Platz, obwohl es niemand mehr braucht - aber der Bibliothekar kann es nicht entfernen, weil formal noch ein Ausleihzettel existiert.</p>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"important-note\">\r\n            <h4>Probleme:</h4>\r\n            <ul>\r\n              <li><strong>OutOfMemoryError:</strong> Wenn der Heap voll ist und die Garbage Collection nicht genug Speicher freigeben kann, wird ein OutOfMemoryError ausgelöst - wie wenn deine Bücherei keinen Platz mehr für neue Bücher hat.</li>\r\n              <li><strong>Referenzen sind der Schlüssel:</strong> Objekte werden nicht automatisch gelöscht, wenn sie nicht mehr verwendet werden - sie müssen für die Garbage Collection nicht mehr referenziert sein. Wie ein Buch, das niemand mehr ausleihen will.</li>\r\n              <li><strong>Speicher-Leaks:</strong> Wenn Objekte unnötig referenziert bleiben, können Speicherlecks entstehen, auch in Java. Das ist wie Bücher, die niemand mehr liest, aber trotzdem nicht aussortiert werden können, weil jemand sie theoretisch noch lesen könnte.</li>\r\n            </ul>\r\n          </div>\r\n      \r\n      <div class=\"summary-section\">\r\n        <h3>Zusammenfassung:</h3>\r\n        <p>Der Heap ist wie eine grosse Bibliothek für alle Objekte in einem Java-Programm. Im Gegensatz zum Stack, der sich automatisch leert, benötigt der Heap einen \"Hausmeister\" (den Garbage Collector), der regelmässig aufräumt.</p>\r\n        <ul>\r\n          <li>Mit <code>new</code> wird ein neues Objekt im Heap erstellt</li>\r\n          <li>Referenzen zeigen auf Objekte - sie sind nicht die Objekte selbst</li>\r\n          <li>Speicherplatz kann erst freigegeben werden, wenn keine Referenz mehr auf das Objekt zeigt</li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  </TheoryLayout>\r\n</template>\r\n\r\n<script>\r\nimport TheoryLayout from './TheoryLayout.vue';\r\n\r\nexport default {\r\n  name: 'MemoryHeapTheory',\r\n  components: {\r\n    TheoryLayout\r\n  },\r\n  mounted() {\r\n    // Hier können spezifische JavaScript-Funktionalitäten für diese Komponente initialisiert werden\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.theory-content h2 {\r\n  color: #2c3e50;\r\n  margin-top: 1.5rem;\r\n  margin-bottom: 1rem;\r\n  font-size: 1.75rem;\r\n  border-left: 5px solid #4361ee;\r\n  padding-left: 1rem;\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.analogy-box {\r\n  background-color: #f0f7ff;\r\n  border-left: 4px solid #3b82f6;\r\n  padding: 1rem;\r\n  margin: 1rem 0;\r\n  border-radius: 0.5rem;\r\n}\r\n\r\n.explanation-box {\r\n  background-color: #f0fff4;\r\n  border-left: 4px solid #10b981;\r\n  padding: 1rem;\r\n  margin-top: 1rem;\r\n  border-radius: 0.5rem;\r\n}\r\n\r\n.memory-comparison {\r\n  margin: 2rem 0;\r\n  padding: 1rem;\r\n  background-color: #f8f9fa;\r\n  border-radius: 0.5rem;\r\n  border: 1px solid #e2e8f0;\r\n}\r\n\r\n.theory-content h3 {\r\n  color: #4361ee;\r\n  margin-top: 1rem;\r\n  margin-bottom: 0.75rem;\r\n  font-size: 1.4rem;\r\n  border-bottom: 1px solid #e2e8f0;\r\n  padding-bottom: 0.5rem;\r\n}\r\n\r\n.theory-content h4 {\r\n  color: #334155;\r\n  margin-top: 1rem;\r\n  margin-bottom: 0.5rem;\r\n  font-size: 1.2rem;\r\n}\r\n\r\n.theory-content ul, .theory-content ol {\r\n  padding-left: 1.5rem;\r\n  margin: 0.5rem 0;\r\n}\r\n\r\n.theory-content li {\r\n  margin-bottom: 0.3rem;\r\n}\r\n\r\n.theory-content p {\r\n  line-height: 1.6;\r\n  color: #334155;\r\n  margin-bottom: 0.75rem;\r\n}\r\n\r\n.two-column-layout {\r\n  display: flex;\r\n  gap: 1rem;\r\n  margin: 1rem 0;\r\n}\r\n\r\n.align-items-start {\r\n  align-items: baseline;\r\n}\r\n\r\n.column {\r\n  flex: 1;\r\n  min-width: 0;\r\n}\r\n\r\n.content-box {\r\n  background-color: #f8fafc;\r\n  border: 1px solid #e2e8f0;\r\n  border-radius: 0.5rem;\r\n  padding: 0.75rem;\r\n  height: 100%;\r\n  box-shadow: 0 2px 4px rgba(0,0,0,0.05);\r\n}\r\n\r\n.visual-container, .example-box, .important-note, .animation-placeholder, .gc-explanation, .string-pool {\r\n  margin: 1rem 0;\r\n  padding: 0.75rem;\r\n  border: 1px solid #e2e8f0;\r\n  border-radius: 0.5rem;\r\n  background-color: #f8fafc;\r\n  box-shadow: 0 2px 4px rgba(0,0,0,0.05);\r\n}\r\n\r\n.gc-section {\r\n  margin: 1.5rem 0;\r\n}\r\n\r\n.gc-visual {\r\n  height: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n}\r\n\r\n.visual-fallback pre, .animation-step pre {\r\n  background-color: #f5f5f5;\r\n  padding: 0.75rem;\r\n  border-radius: 0.5rem;\r\n  font-family: monospace;\r\n  overflow-x: auto;\r\n  line-height: 1.2;\r\n  font-size: 0.85rem;\r\n  margin: 0;\r\n}\r\n\r\n.code-example {\r\n  background-color: #1e1e3f;\r\n  color: #fff;\r\n  padding: 1rem;\r\n  border-radius: 6px;\r\n  margin: 1rem 0;\r\n  font-family: 'Fira Code', 'Consolas', monospace;\r\n  font-size: 0.9rem;\r\n  line-height: 1.5;\r\n  overflow-x: auto;\r\n  box-shadow: 0 3px 6px rgba(0, 0, 0, 0.1);\r\n  position: relative;\r\n}\r\n\r\n.important-note {\r\n  background-color: #fef2f2;\r\n  border-left: 4px solid #ef4444;\r\n  position: relative;\r\n  padding-left: 1.5rem;\r\n  height: 100%;\r\n}\r\n\r\n.heap-visualization {\r\n  margin-top: 1rem;\r\n}\r\n\r\n.summary-section {\r\n  background-color: #f0f9ff;\r\n  border-radius: 0.5rem;\r\n  padding: 1rem;\r\n  margin-top: 1.5rem;\r\n  border-left: 4px solid #3b82f6;\r\n}\r\n\r\n.summary-section h3 {\r\n  margin-top: 0.75rem;\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .two-column-layout {\r\n    flex-direction: column;\r\n  }\r\n  \r\n  .theory-content h2 {\r\n    font-size: 1.5rem;\r\n  }\r\n  \r\n  .theory-content h3 {\r\n    font-size: 1.25rem;\r\n  }\r\n  \r\n  .visual-fallback pre {\r\n    font-size: 0.75rem;\r\n  }\r\n  \r\n  .code-example {\r\n    font-size: 0.85rem;\r\n  }\r\n}\r\n</style>","import { render } from \"./MemoryHeapTheory.vue?vue&type=template&id=73605166&scoped=true\"\nimport script from \"./MemoryHeapTheory.vue?vue&type=script&lang=js\"\nexport * from \"./MemoryHeapTheory.vue?vue&type=script&lang=js\"\n\nimport \"./MemoryHeapTheory.vue?vue&type=style&index=0&id=73605166&scoped=true&lang=css\"\n\nimport exportComponent from \"../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-73605166\"]])\n\nexport default __exports__","<template>\r\n  <TheoryLayout title=\"Method Area\">\r\n    <div class=\"theory-content\">\r\n      <h2>Was ist die Method Area?</h2>\r\n      <p>Die Method Area (auch als Metadatenbereich bekannt) ist ein Teil des JVM-Speichers, der Klasseninformationen und statische Daten speichert.</p>\r\n      \r\n      <div class=\"visual-container\">\r\n        <div class=\"visual-fallback\">\r\n          <pre>\r\n┌─────────────────────────────────────┐\r\n│           METHOD AREA               │\r\n│                                     │\r\n│  ┌─────────────────────────────┐    │\r\n│  │ Klasse: Student             │    │\r\n│  │ - Statische Felder          │    │\r\n│  │ - Methodencode              │    │\r\n│  │ - Konstantenpool            │    │\r\n│  └─────────────────────────────┘    │\r\n│                                     │\r\n│  ┌─────────────────────────────┐    │\r\n│  │ Klasse: Calculator          │    │\r\n│  │ - Statische Felder          │    │\r\n│  │ - Methodencode              │    │\r\n│  │ - Konstantenpool            │    │\r\n│  └─────────────────────────────┘    │\r\n│                                     │\r\n│  ┌─────────────────────────────┐    │\r\n│  │ Klasse: Course              │    │\r\n│  │ - Statische Felder          │    │\r\n│  │ - Methodencode              │    │\r\n│  │ - Konstantenpool            │    │\r\n│  └─────────────────────────────┘    │\r\n│                                     │\r\n└─────────────────────────────────────┘\r\n          </pre>\r\n        </div>\r\n      </div>\r\n\r\n      <h3>Inhalte der Method Area:</h3>\r\n      <div class=\"content-grid\">\r\n        <div class=\"content-item\">\r\n          <h4>1. Klassenmetadaten</h4>\r\n          <ul>\r\n            <li>Vollständiger Klassenname und Paketinformation</li>\r\n            <li>Vererbungshierarchie (Superklassen, implementierte Interfaces)</li>\r\n            <li>Informationen über Konstruktoren und Methoden</li>\r\n            <li>Typinformationen und Zugriffsbeschränkungen</li>\r\n            <li>Annotations und andere Metadaten</li>\r\n          </ul>\r\n        </div>\r\n        \r\n        <div class=\"content-item\">\r\n          <h4>2. Statische Variablen</h4>\r\n          <ul>\r\n            <li>Alle mit <code>static</code> deklarierten Felder</li>\r\n            <li>Klassenweite Konstanten (<code>static final</code>)</li>\r\n            <li>Datenwerte, die für alle Instanzen gleich sind</li>\r\n            <li>Beispiel: <code>Math.PI</code>, <code>Integer.MAX_VALUE</code></li>\r\n          </ul>\r\n        </div>\r\n        \r\n        <div class=\"content-item\">\r\n          <h4>3. Methoden-Bytecode</h4>\r\n          <ul>\r\n            <li>Kompilierter Code aller Methoden (JVM Bytecode)</li>\r\n            <li>Ausführungsinstruktionen für die JVM</li>\r\n            <li>Statische und Instanz-Methodenimplementierungen</li>\r\n            <li>Nativer Code-Verknüpfungen (JNI)</li>\r\n          </ul>\r\n        </div>\r\n        \r\n        <div class=\"content-item\">\r\n          <h4>4. Konstantenpool</h4>\r\n          <ul>\r\n            <li>String-Literale und numerische Konstanten</li>\r\n            <li>Symbolische Verweise auf Klassen und Methoden</li>\r\n            <li>Feld- und Methodennamen</li>\r\n            <li>Typ-Deskriptoren und Signaturen</li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"example-box\">\r\n        <h4>Praktisches Beispiel:</h4>\r\n        <pre class=\"code-example\">\r\npublic class MethodAreaExample {\r\n    // Statische Variable - in der Method Area gespeichert\r\n    public static int counter = 0;\r\n    \r\n    // Statische Konstante - in der Method Area gespeichert\r\n    public static final String APP_NAME = \"Memory Visualizer\";\r\n    \r\n    // Statische Methode - Bytecode in der Method Area\r\n    public static void incrementCounter() {\r\n        counter++;\r\n        System.out.println(\"Counter: \" + counter);\r\n    }\r\n    \r\n    // Instanzmethode - Bytecode auch in der Method Area\r\n    public void printMessage(String message) {\r\n        // String-Literal \"Message: \" im Konstantenpool der Method Area\r\n        System.out.println(\"Message: \" + message);\r\n    }\r\n    \r\n    public static void main(String[] args) {\r\n        // Ruft Code aus der Method Area auf\r\n        incrementCounter();\r\n        \r\n        // Erzeugt ein Objekt (im Heap),\r\n        // aber die Klasseninformation kommt aus der Method Area\r\n        MethodAreaExample example = new MethodAreaExample();\r\n        example.printMessage(\"Hello World\");\r\n    }\r\n}</pre>\r\n\r\n        <div class=\"example-explanation\">\r\n          <p><strong>Was passiert im Hintergrund:</strong></p>\r\n          <ol>\r\n            <li>Beim Laden der Klasse <code>MethodAreaExample</code> werden alle Klasseninformationen in der Method Area gespeichert.</li>\r\n            <li>Die statische Variable <code>counter</code> wird in der Method Area initialisiert.</li>\r\n            <li>Die Konstante <code>APP_NAME</code> wird im Konstantenpool abgelegt.</li>\r\n            <li>Der Bytecode für alle Methoden wird in der Method Area gespeichert.</li>\r\n            <li>Beim Aufruf von <code>new MethodAreaExample()</code> werden die Klasseninformationen aus der Method Area gelesen, um das Objekt im Heap zu erstellen.</li>\r\n          </ol>\r\n        </div>\r\n      </div>\r\n      \r\n      <div class=\"comparison-section\">\r\n        <h3>Method Area vs. Heap vs. Stack:</h3>\r\n        <div class=\"table-container\">\r\n          <table class=\"comparison-table\">\r\n            <thead>\r\n              <tr>\r\n                <th>Speicherbereich</th>\r\n                <th>Gespeicherte Daten</th>\r\n                <th>Lebensdauer</th>\r\n                <th>Speicherverwaltung</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              <tr>\r\n                <td><strong>Method Area</strong></td>\r\n                <td>Klassenmetadaten, statische Variablen, Bytecode</td>\r\n                <td>Solange die Klasse geladen ist</td>\r\n                <td>Wird bei Klassenladen gefüllt, bei Klassenentladen geleert</td>\r\n              </tr>\r\n              <tr>\r\n                <td><strong>Heap</strong></td>\r\n                <td>Objekte, Arrays, Instanzvariablen</td>\r\n                <td>Solange Objekte referenziert werden</td>\r\n                <td>Garbage Collection</td>\r\n              </tr>\r\n              <tr>\r\n                <td><strong>Stack</strong></td>\r\n                <td>Lokale Variablen, Methodenparameter</td>\r\n                <td>Während der Methodenausführung</td>\r\n                <td>Automatisch bei Methodenende</td>\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n      \r\n      <div class=\"flex-container\">\r\n        <div class=\"important-note\">\r\n          <h4>Wichtig zu wissen:</h4>\r\n          <ul>\r\n            <li><strong>JVM-Spezifisch:</strong> Die genaue Implementierung der Method Area kann je nach JVM-Implementierung variieren.</li>\r\n            <li><strong>Permanente Generation:</strong> In älteren Java-Versionen war die Method Area Teil der \"Permanent Generation\". Ab Java 8 wurde sie durch den \"Metaspace\" ersetzt, der dynamisch wachsen kann.</li>\r\n            <li><strong>OutOfMemoryError:</strong> Wenn zu viele Klassen geladen werden, kann ein \"OutOfMemoryError: Metaspace\" auftreten.</li>\r\n            <li><strong>Klassenlader:</strong> Die Method Area wird durch Klassenlader (ClassLoader) befüllt, wenn neue Klassen benötigt werden.</li>\r\n          </ul>\r\n        </div>\r\n\r\n        <div class=\"summary-section\">\r\n          <h3>Zusammenfassung:</h3>\r\n          <p>Die Method Area ist das \"Wissensarchiv\" der JVM. Sie enthält alle Informationen über Klassen, ihre Methoden, statische Variablen und Konstanten. Ohne die Method Area wüsste die JVM nicht, wie Objekte strukturiert sind oder wie Methoden ausgeführt werden sollen. Sie ist ein zentraler Bestandteil der Java-Speicherarchitektur und ermöglicht erst die Ausführung von Java-Programmen.</p>\r\n        </div>\r\n      </div>\r\n      \r\n      <h3>Funktion im Gesamtsystem:</h3>\r\n      <p>Die Method Area ist für die Laufzeitumgebung wichtig, da sie Informationen über Klassen und Methoden bereitstellt, die für die Ausführung benötigt werden. Im Gegensatz zum Heap, der Instanzen von Klassen speichert, enthält die Method Area die Klasseninformationen selbst.</p>\r\n    </div>\r\n  </TheoryLayout>\r\n</template>\r\n\r\n<script>\r\nimport TheoryLayout from './TheoryLayout.vue';\r\n\r\nexport default {\r\n  name: 'MethodAreaTheory',\r\n  components: {\r\n    TheoryLayout\r\n  },\r\n  mounted() {\r\n    // Hier können spezifische JavaScript-Funktionalitäten für diese Komponente initialisiert werden\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.theory-content {\r\n  max-width: 100%;\r\n  padding: 0.5rem;\r\n}\r\n\r\n.theory-content h2 {\r\n  color: #2c3e50;\r\n  margin-bottom: 1rem;\r\n  font-size: 1.6rem;\r\n  border-left: 4px solid #4361ee;\r\n  padding-left: 0.75rem;\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.theory-content h3 {\r\n  color: #4361ee;\r\n  margin-top: 1.25rem;\r\n  margin-bottom: 0.75rem;\r\n  font-size: 1.3rem;\r\n  border-bottom: 1px solid #e2e8f0;\r\n  padding-bottom: 0.35rem;\r\n}\r\n\r\n.theory-content h4 {\r\n  color: #334155;\r\n  margin-top: 1rem;\r\n  margin-bottom: 0.5rem;\r\n  font-size: 1.1rem;\r\n}\r\n\r\n.theory-content ul, .theory-content ol {\r\n  padding-left: 1.25rem;\r\n  margin: 0.5rem 0;\r\n}\r\n\r\n.theory-content li {\r\n  margin-bottom: 0.35rem;\r\n}\r\n\r\n.theory-content p {\r\n  line-height: 1.6;\r\n  color: #334155;\r\n  margin-bottom: 0.75rem;\r\n}\r\n\r\n.visual-container {\r\n  margin: 1rem 0;\r\n  padding: 0.75rem;\r\n  border: 1px solid #e2e8f0;\r\n  border-radius: 0.5rem;\r\n  background-color: #f8fafc;\r\n  box-shadow: 0 1px 3px rgba(0,0,0,0.05);\r\n}\r\n\r\n.visual-fallback pre {\r\n  background-color: #f5f5f5;\r\n  padding: 0.75rem;\r\n  border-radius: 0.5rem;\r\n  font-family: monospace;\r\n  overflow-x: auto;\r\n  line-height: 1.2;\r\n  font-size: 0.9rem;\r\n  margin: 0;\r\n}\r\n\r\n.content-grid {\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\r\n  gap: 1rem;\r\n  margin: 1rem 0;\r\n}\r\n\r\n.content-item {\r\n  background-color: #f8fafc;\r\n  padding: 0.75rem;\r\n  border-radius: 0.5rem;\r\n  border: 1px solid #e2e8f0;\r\n}\r\n\r\n.example-box {\r\n  margin: 1.5rem 0;\r\n  padding: 1rem;\r\n  border: 1px solid #e2e8f0;\r\n  border-radius: 0.5rem;\r\n  background-color: #f8fafc;\r\n  box-shadow: 0 1px 3px rgba(0,0,0,0.05);\r\n}\r\n\r\n.code-example {\r\n  background-color: #1e1e3f;\r\n  color: #fff;\r\n  padding: 1rem;\r\n  border-radius: 6px;\r\n  margin: 0.75rem 0;\r\n  font-family: 'Fira Code', 'Consolas', monospace;\r\n  font-size: 0.9rem;\r\n  line-height: 1.4;\r\n  overflow-x: auto;\r\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.example-explanation {\r\n  margin-top: 0.75rem;\r\n}\r\n\r\n.important-note {\r\n  background-color: #fef2f2;\r\n  border-left: 3px solid #ef4444;\r\n  padding: 0.75rem 0.75rem 0.75rem 1rem;\r\n  margin: 1rem 0;\r\n  border-radius: 0.5rem;\r\n  flex: 1;\r\n}\r\n\r\n.summary-section {\r\n  background-color: #f0f4ff;\r\n  border-left: 3px solid #4361ee;\r\n  padding: 0.75rem 0.75rem 0.75rem 1rem;\r\n  margin: 1rem 0;\r\n  border-radius: 0.5rem;\r\n  flex: 1;\r\n}\r\n\r\n.comparison-section {\r\n  margin: 1.5rem 0;\r\n}\r\n\r\n.table-container {\r\n  overflow-x: auto;\r\n  margin: 0.75rem 0;\r\n}\r\n\r\n.comparison-table {\r\n  width: 100%;\r\n  border-collapse: collapse;\r\n  font-size: 0.9rem;\r\n}\r\n\r\n.comparison-table th {\r\n  background-color: #4361ee;\r\n  color: white;\r\n  text-align: left;\r\n  padding: 0.5rem 0.75rem;\r\n}\r\n\r\n.comparison-table td {\r\n  border: 1px solid #e2e8f0;\r\n  padding: 0.5rem 0.75rem;\r\n}\r\n\r\n.comparison-table tr:nth-child(even) {\r\n  background-color: #f8fafc;\r\n}\r\n\r\n.flex-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 1rem;\r\n  margin: 1.5rem 0;\r\n}\r\n\r\ncode {\r\n  background-color: #f1f5f9;\r\n  padding: 0.1rem 0.3rem;\r\n  border-radius: 0.25rem;\r\n  font-family: 'Fira Code', 'Consolas', monospace;\r\n  font-size: 0.9em;\r\n}\r\n\r\n@media (min-width: 768px) {\r\n  .theory-content {\r\n    padding: 1rem;\r\n  }\r\n  \r\n  .flex-container {\r\n    flex-direction: row;\r\n  }\r\n\r\n  .content-grid {\r\n    grid-template-columns: repeat(2, 1fr);\r\n  }\r\n}\r\n\r\n@media (min-width: 1024px) {\r\n  .content-grid {\r\n    grid-template-columns: repeat(4, 1fr);\r\n  }\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .theory-content h2 {\r\n    font-size: 1.4rem;\r\n  }\r\n  \r\n  .theory-content h3 {\r\n    font-size: 1.2rem;\r\n  }\r\n\r\n  .theory-content h4 {\r\n    font-size: 1rem;\r\n  }\r\n\r\n  .visual-fallback pre {\r\n    font-size: 0.8rem;\r\n  }\r\n}\r\n</style>","import { render } from \"./MethodAreaTheory.vue?vue&type=template&id=7ed15831&scoped=true\"\nimport script from \"./MethodAreaTheory.vue?vue&type=script&lang=js\"\nexport * from \"./MethodAreaTheory.vue?vue&type=script&lang=js\"\n\nimport \"./MethodAreaTheory.vue?vue&type=style&index=0&id=7ed15831&scoped=true&lang=css\"\n\nimport exportComponent from \"../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-7ed15831\"]])\n\nexport default __exports__","<template>\r\n  <TheoryLayout title=\"Stack Pointer\">\r\n    <div class=\"theory-content\">\r\n        <h2>Was ist der Stack Pointer?</h2>\r\n              <p>Der Stack Pointer (SP) ist ein spezielles Register in der JVM, das auf die aktuelle Position im Stack zeigt. Er ist wie ein Lesezeichen, das angibt, wo im Ausführungsstack wir uns gerade befinden.</p>\r\n              \r\n              <div class=\"visual-container\">\r\n                <img src=\"/images/theory/stack-pointer.png\" alt=\"Stack Pointer Visualisierung\" class=\"theory-image\" onerror=\"this.style.display='none'; document.getElementById('stack-pointer-fallback').style.display='block';\" />\r\n                <div id=\"stack-pointer-fallback\" class=\"visual-fallback\" style=\"display:none;\">\r\n                  <pre>\r\n          ┌─────────────────────────┐\r\n          │  lokale Variable z = 7  │\r\n          │  lokale Variable y = 3  │\r\n          │  Parameter x = 5        │ ← Stack Pointer (SP)\r\n          ├─────────────────────────┤\r\n          │  Rücksprungadresse      │\r\n          │  lokale Variable b = 42 │\r\n          │  lokale Variable a = 10 │\r\n          └─────────────────────────┘\r\n                  </pre>\r\n                </div>\r\n              </div>\r\n\r\n              <h3>Funktionsweise des Stack Pointers:</h3>\r\n              <p>Der Stack Pointer ist ein dynamischer Zeiger, der sich mit jedem Methodenaufruf und jeder Methodenrückkehr im Speicher bewegt.</p>\r\n              \r\n              <div class=\"function-steps\">\r\n                <div class=\"step\">\r\n                  <h4>Bei Methodenaufrufen</h4>\r\n                  <p>Wenn eine Methode aufgerufen wird:</p>\r\n                  <ol>\r\n                    <li>Wird ein neuer Stack-Frame erstellt</li>\r\n                    <li>Der Stack Pointer \"wandert\" zum neuen Frame</li>\r\n                    <li>Der neue Frame wird zum aktiven Ausführungskontext</li>\r\n                  </ol>\r\n                </div>\r\n                \r\n                <div class=\"step\">\r\n                  <h4>Bei Methodenrückkehr</h4>\r\n                  <p>Wenn eine Methode beendet wird:</p>\r\n                  <ol>\r\n                    <li>Der aktuelle Frame wird entfernt</li>\r\n                    <li>Der Stack Pointer \"wandert zurück\" zum vorherigen Frame</li>\r\n                    <li>Die aufrufende Methode wird wieder aktiv</li>\r\n                  </ol>\r\n                </div>\r\n              </div>\r\n\r\n              <div class=\"animation-container\">\r\n                <h3>Der Stack Pointer in Aktion:</h3>\r\n                <div class=\"stack-animation-steps\">\r\n                  <div class=\"animation-step\">\r\n                    <div class=\"step-description\">1. <code>main()</code> wird ausgeführt</div>\r\n                    <pre>\r\n          ┌─────────────────────────┐\r\n          │  lokale Variable n = 5  │ ← SP\r\n          ├─────────────────────────┤ \r\n          │  Stack Frame: main()    │ \r\n          └─────────────────────────┘\r\n                    </pre>\r\n                  </div>\r\n                  \r\n                  <div class=\"animation-step\">\r\n                    <div class=\"step-description\">2. <code>calculate(n)</code> wird aufgerufen</div>\r\n                    <pre>\r\n          ┌─────────────────────────┐\r\n          │  Parameter x = 5        │\r\n          │  lokale Variable res = 0│ ← SP\r\n          ├─────────────────────────┤\r\n          │  Rücksprungadresse      │\r\n          │  lokale Variable n = 5  │\r\n          ├─────────────────────────┤ \r\n          │  Stack Frame: main()    │\r\n          └─────────────────────────┘\r\n                    </pre>\r\n                  </div>\r\n                  \r\n                  <div class=\"animation-step\">\r\n                    <div class=\"step-description\">3. <code>calculate()</code> kehrt zurück</div>\r\n                    <pre>\r\n          ┌─────────────────────────┐\r\n          │  lokale Variable n = 5  │\r\n          │  lokale Variable res = 25│ ← SP (Ergebnis gespeichert)\r\n          ├─────────────────────────┤ \r\n          │  Stack Frame: main()    │\r\n          └─────────────────────────┘\r\n                    </pre>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <div class=\"example-box\">\r\n                <h4>Praktisches Beispiel zur Stack Pointer Bewegung:</h4>\r\n                <pre class=\"code-example\">\r\n          public class StackPointerDemo {\r\n              public static void main(String[] args) {\r\n                  // SP zeigt auf den main()-Stack-Frame\r\n                  int number = 10;\r\n                  System.out.println(\"In main: \" + number);\r\n                  \r\n                  // Methodenaufruf - SP wird auf firstMethod() bewegt\r\n                  int result = firstMethod(number);\r\n                  \r\n                  // SP zeigt wieder auf den main()-Stack-Frame\r\n                  System.out.println(\"Ergebnis: \" + result);\r\n              }\r\n              \r\n              public static int firstMethod(int x) {\r\n                  // SP zeigt jetzt auf den firstMethod()-Stack-Frame\r\n                  int y = x * 2;\r\n                  System.out.println(\"In firstMethod: \" + y);\r\n                  \r\n                  // Weiterer Methodenaufruf - SP bewegt sich zu secondMethod()\r\n                  int z = secondMethod(y);\r\n                  \r\n                  // SP zeigt wieder auf den firstMethod()-Stack-Frame\r\n                  return z + 5;\r\n              }\r\n              \r\n              public static int secondMethod(int a) {\r\n                  // SP zeigt jetzt auf den secondMethod()-Stack-Frame\r\n                  int b = a + 3;\r\n                  System.out.println(\"In secondMethod: \" + b);\r\n                  \r\n                  // Rückkehr - SP geht zurück zum firstMethod()-Frame\r\n                  return b * 2;\r\n              }\r\n          }</pre>\r\n                \r\n                <div class=\"stack-visualization\">\r\n                  <p><strong>Stack Pointer Verschiebung während der Ausführung:</strong></p>\r\n                  <div class=\"animation-steps\">\r\n                    <div class=\"step\">\r\n                      <div class=\"step-header\">main() wird ausgeführt</div>\r\n                      <pre>\r\n          ┌───────────────────┐\r\n          │ number = 10       │ ← SP hier\r\n          └───────────────────┘</pre>\r\n                    </div>\r\n                    <div class=\"step\">\r\n                      <div class=\"step-header\">firstMethod(number) wird aufgerufen</div>\r\n                      <pre>\r\n          ┌───────────────────┐\r\n          │ x = 10            │\r\n          │ y = 20            │ ← SP bewegt hierher\r\n          ├───────────────────┤\r\n          │ number = 10       │\r\n          └───────────────────┘</pre>\r\n                    </div>\r\n                    <div class=\"step\">\r\n                      <div class=\"step-header\">secondMethod(y) wird von firstMethod aufgerufen</div>\r\n                      <pre>\r\n          ┌───────────────────┐\r\n          │ a = 20            │\r\n          │ b = 23            │ ← SP bewegt hierher\r\n          ├───────────────────┤\r\n          │ x = 10            │\r\n          │ y = 20            │\r\n          ├───────────────────┤\r\n          │ number = 10       │\r\n          └───────────────────┘</pre>\r\n                    </div>\r\n                    <div class=\"step\">\r\n                      <div class=\"step-header\">secondMethod() kehrt zurück (b*2 = 46)</div>\r\n                      <pre>\r\n          ┌───────────────────┐\r\n          │ x = 10            │\r\n          │ y = 20            │\r\n          │ z = 46            │ ← SP bewegt hierher zurück\r\n          ├───────────────────┤\r\n          │ number = 10       │\r\n          └───────────────────┘</pre>\r\n                    </div>\r\n                    <div class=\"step\">\r\n                      <div class=\"step-header\">firstMethod() kehrt zurück (z+5 = 51)</div>\r\n                      <pre>\r\n          ┌───────────────────┐\r\n          │ number = 10       │\r\n          │ result = 51       │ ← SP bewegt hierher zurück\r\n          └───────────────────┘</pre>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <div class=\"important-note\">\r\n                <h4>Wichtig zu wissen:</h4>\r\n                <ul>\r\n                  <li><strong>Thread-spezifisch:</strong> Jeder Java-Thread hat seinen eigenen Stack und damit auch seinen eigenen Stack Pointer.</li>\r\n                  <li><strong>Nicht direkt zugreifbar:</strong> Im Gegensatz zu einigen Programmiersprachen ist der Stack Pointer in Java nicht direkt über Code manipulierbar.</li>\r\n                  <li><strong>StackOverflowError:</strong> Wenn zu viele verschachtelte Methodenaufrufe erfolgen und der Stack seine maximale Größe erreicht, kann der Stack Pointer nicht weiter verschoben werden, was zu einem StackOverflowError führt.</li>\r\n                  <li><strong>Performance:</strong> Da der Stack Pointer immer auf den aktiven Frame zeigt, ist der Zugriff auf lokale Variablen sehr schnell - ein wichtiger Leistungsvorteil.</li>\r\n                </ul>\r\n              </div>\r\n\r\n              <div class=\"summary-section\">\r\n                <h3>Zusammenfassung:</h3>\r\n                <p>Der Stack Pointer ist ein essenzieller Mechanismus der JVM, der den aktuellen Ausführungskontext verfolgt. Er bewegt sich mit jedem Methodenaufruf und jeder Methodenrückkehr und ermöglicht so die strukturierte Abarbeitung von verschachtelten Methodenaufrufen. Ohne den Stack Pointer könnte die JVM nicht wissen, wo im Programm sie sich gerade befindet und welche Variablen zum aktuellen Kontext gehören.</p>\r\n              </div>\r\n              \r\n              <h3>Zusammenspiel mit dem Call Stack:</h3>\r\n              <p>Wenn eine neue Methode aufgerufen wird, wird ein neuer Stack-Frame erstellt und der Stack Pointer wird aktualisiert, um auf diesen neuen Frame zu zeigen. Wenn die Methode beendet wird, wird der Stack-Frame entfernt und der Stack Pointer wird zurückgesetzt, um auf den vorherigen Frame zu zeigen.</p>\r\n    </div>\r\n  </TheoryLayout>\r\n</template>\r\n\r\n<script>\r\nimport TheoryLayout from './TheoryLayout.vue';\r\n\r\nexport default {\r\n  name: 'StackPointerTheory',\r\n  components: {\r\n    TheoryLayout\r\n  },\r\n  mounted() {\r\n    // Hier können spezifische JavaScript-Funktionalitäten für diese Komponente initialisiert werden\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.theory-content h2 {\r\n  color: #2c3e50;\r\n  margin-top: 2.5rem;\r\n  font-size: 1.75rem;\r\n  border-left: 5px solid #4361ee;\r\n  padding-left: 1rem;\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.theory-content h3 {\r\n  color: #4361ee;\r\n  margin-top: 1.75rem;\r\n  font-size: 1.4rem;\r\n  border-bottom: 1px solid #e2e8f0;\r\n  padding-bottom: 0.5rem;\r\n}\r\n\r\n.theory-content h4 {\r\n  color: #334155;\r\n  margin-top: 1.5rem;\r\n  font-size: 1.2rem;\r\n}\r\n\r\n.theory-content ul, .theory-content ol {\r\n  padding-left: 1.5rem;\r\n  margin: 1rem 0;\r\n}\r\n\r\n.theory-content li {\r\n  margin-bottom: 0.5rem;\r\n}\r\n\r\n.theory-content p {\r\n  line-height: 1.7;\r\n  color: #334155;\r\n  margin-bottom: 1rem;\r\n}\r\n\r\n/* Style-Übernahme aus TheoryDetail.vue */\r\n.visual-container, .example-box, .important-note, .animation-placeholder {\r\n  margin: 2rem 0;\r\n  padding: 1rem;\r\n  border: 1px solid #e2e8f0;\r\n  border-radius: 0.5rem;\r\n  background-color: #f8fafc;\r\n  box-shadow: 0 2px 4px rgba(0,0,0,0.05);\r\n}\r\n\r\n.visual-fallback pre, .animation-step pre {\r\n  background-color: #f5f5f5;\r\n  padding: 1rem;\r\n  border-radius: 0.5rem;\r\n  font-family: monospace;\r\n  overflow-x: auto;\r\n  line-height: 1.2;\r\n}\r\n\r\n.code-example {\r\n  background-color: #1e1e3f;\r\n  color: #fff;\r\n  padding: 1.25rem;\r\n  border-radius: 6px;\r\n  margin: 1.5rem 0;\r\n  font-family: 'Fira Code', 'Consolas', monospace;\r\n  font-size: 0.95rem;\r\n  line-height: 1.5;\r\n  overflow-x: auto;\r\n  box-shadow: 0 3px 6px rgba(0, 0, 0, 0.1);\r\n  position: relative;\r\n}\r\n\r\n.important-note {\r\n  background-color: #fef2f2;\r\n  border-left: 4px solid #ef4444;\r\n  position: relative;\r\n  padding-left: 3rem;\r\n}\r\n\r\n.animation-step {\r\n  margin-bottom: 1rem;\r\n}\r\n\r\n.step-description {\r\n  font-weight: bold;\r\n  margin-bottom: 0.5rem;\r\n  color: #4361ee;\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .theory-content h2 {\r\n    font-size: 1.5rem;\r\n  }\r\n  \r\n  .theory-content h3 {\r\n    font-size: 1.25rem;\r\n  }\r\n}\r\n</style>\r\n","import { render } from \"./StackPointerTheory.vue?vue&type=template&id=27e772f8&scoped=true\"\nimport script from \"./StackPointerTheory.vue?vue&type=script&lang=js\"\nexport * from \"./StackPointerTheory.vue?vue&type=script&lang=js\"\n\nimport \"./StackPointerTheory.vue?vue&type=style&index=0&id=27e772f8&scoped=true&lang=css\"\n\nimport exportComponent from \"../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-27e772f8\"]])\n\nexport default __exports__","<template>\r\n  <TheoryLayout title=\"Instruction Pointer\">\r\n    <div class=\"theory-content\">\r\n      <h2>Was ist der Instruction Pointer?</h2>\r\n      <p>Der Instruction Pointer (auch Program Counter oder PC genannt) ist ein Register in der JVM, das auf die aktuelle oder nächste auszuführende Anweisung zeigt.</p>\r\n      \r\n      <h3>Aufgaben:</h3>\r\n      <ul class=\"compact-list\">\r\n        <li>Er verfolgt den Fortschritt der Programmausführung</li>\r\n        <li>Er zeigt auf die nächste auszuführende Bytecode-Instruktion</li>\r\n        <li>Er wird nach jeder Instruktion aktualisiert</li>\r\n      </ul>\r\n      \r\n      <h3>Programmflusssteuerung:</h3>\r\n      <p>Der Instruction Pointer ist entscheidend für die Steuerung des Programmflusses. Bei Sprüngen, bedingten Anweisungen oder Schleifenausführungen wird der Instruction Pointer entsprechend angepasst, um auf die nächste auszuführende Anweisung zu zeigen.</p>\r\n      \r\n      <h3>Thread-spezifisch:</h3>\r\n      <p>In Java hat jeder Thread seinen eigenen Instruction Pointer, damit mehrere Threads gleichzeitig an verschiedenen Stellen im Code ausgeführt werden können.</p>\r\n\r\n      <div class=\"visual-container compact\">\r\n        <img src=\"/images/theory/instruction-pointer.png\" alt=\"Instruction Pointer Visualisierung\" class=\"theory-image\" onerror=\"this.style.display='none'; document.getElementById('instruction-pointer-fallback').style.display='block';\" />\r\n        <div id=\"instruction-pointer-fallback\" class=\"visual-fallback\" style=\"display:none;\">\r\n          <pre>\r\n┌─────────────────────────────────────┐\r\n│ Bytecode einer Methode:             │\r\n│                                     │\r\n│ 0: iload_1         // lade x        │\r\n│ 1: iload_2         // lade y        │\r\n│ 2: iadd            // addiere       │ ← Instruction Pointer\r\n│ 3: istore_3        // speichere z   │\r\n│ 4: iload_3         // lade z        │\r\n│ 5: ireturn         // kehre zurück  │\r\n│                                     │\r\n└─────────────────────────────────────┘\r\n          </pre>\r\n        </div>\r\n      </div>\r\n\r\n      <h3>Hauptaufgaben des Instruction Pointers:</h3>\r\n      <ul class=\"compact-list\">\r\n        <li><strong>Ausführungsverfolgung:</strong> Zeigt immer auf die nächste auszuführende Instruktion</li>\r\n        <li><strong>Kontinuität:</strong> Ermöglicht sequentielle Abarbeitung von Anweisungen</li>\r\n        <li><strong>Sprungsteuerung:</strong> Wird bei Verzweigungen (if/else), Schleifen und Methodenaufrufen angepasst</li>\r\n        <li><strong>Kontrolltransfer:</strong> Bei Exceptions oder return-Anweisungen wird er entsprechend aktualisiert</li>\r\n      </ul>\r\n      \r\n      <div class=\"comparison-note\">\r\n        <h4>Unterschied zum Stack Pointer:</h4>\r\n        <div class=\"comparison-grid\">\r\n          <div class=\"comparison-item\">\r\n            <h5>Stack Pointer (SP)</h5>\r\n            <ul class=\"compact-list\">\r\n              <li>Zeigt auf den aktuellen Stack-Frame</li>\r\n              <li>Verfolgt den Kontext der Methode</li>\r\n              <li>Bezieht sich auf den Call Stack</li>\r\n              <li>Ändert sich nur bei Methoden-Ein-/Austritt</li>\r\n            </ul>\r\n          </div>\r\n          <div class=\"comparison-item\">\r\n            <h5>Instruction Pointer (IP)</h5>\r\n            <ul class=\"compact-list\">\r\n              <li>Zeigt auf eine konkrete Anweisung</li>\r\n              <li>Verfolgt den Fortschritt in der Methode</li>\r\n              <li>Bezieht sich auf Bytecode-Anweisungen</li>\r\n              <li>Ändert sich bei jeder Anweisungsausführung</li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"instruction-animation\">\r\n        <h3>Der Instruction Pointer in Aktion:</h3>\r\n        <p>Betrachten wir, wie sich der Instruction Pointer bei der Ausführung einer einfachen if-else-Struktur bewegt:</p>\r\n        \r\n        <div class=\"code-with-ip\">\r\n          <pre class=\"code-example\">\r\npublic int vergleiche(int a, int b) {\r\n    if (a &gt; b) {\r\n        return a;\r\n    } else {\r\n        return b;\r\n    }\r\n}</pre>\r\n\r\n          <div class=\"bytecode-execution\">\r\n            <p><strong>Vereinfachter Bytecode mit IP-Bewegung:</strong></p>\r\n            <div class=\"execution-steps\">\r\n              <div class=\"execution-step\">\r\n                <div class=\"ip-indicator\">→</div>\r\n                <code>0: iload_1       // lade a</code>\r\n              </div>\r\n              <div class=\"execution-step\">\r\n                <div class=\"ip-indicator\">→</div>\r\n                <code>1: iload_2       // lade b</code>\r\n              </div>\r\n              <div class=\"execution-step\">\r\n                <div class=\"ip-indicator\">→</div>\r\n                <code>2: if_icmple 7   // wenn a &lt;= b, springe zu 7</code>\r\n              </div>\r\n              <div class=\"execution-step\">\r\n                <div class=\"ip-indicator\">→</div>\r\n                <code>5: iload_1       // lade a</code>\r\n              </div>\r\n              <div class=\"execution-step\">\r\n                <div class=\"ip-indicator\">→</div>\r\n                <code>6: ireturn       // kehre mit a zurück</code>\r\n              </div>\r\n              <div class=\"execution-step\">\r\n                <div class=\"ip-indicator\">→</div>\r\n                <code>7: iload_2       // lade b</code>\r\n              </div>\r\n              <div class=\"execution-step\">\r\n                <div class=\"ip-indicator\">→</div>\r\n                <code>8: ireturn       // kehre mit b zurück</code>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"important-note\">\r\n        <h4>Wichtig zu wissen:</h4>\r\n        <ul class=\"compact-list\">\r\n          <li><strong>Unsichtbar für Entwickler:</strong> Der Instruction Pointer ist im Java-Code nicht direkt sichtbar oder manipulierbar.</li>\r\n          <li><strong>JVM-intern:</strong> Er wird ausschließlich von der JVM verwaltet, um den Ausführungsfluss zu steuern.</li>\r\n          <li><strong>Debug-Tools:</strong> Debugger können den aktuellen Instruction Pointer anzeigen, um die Programmausführung zu verfolgen.</li>\r\n          <li><strong>Multithreading:</strong> Bei Kontext-Wechseln zwischen Threads wird der jeweilige Instruction Pointer gespeichert und wiederhergestellt.</li>\r\n        </ul>\r\n      </div>\r\n\r\n      <div class=\"summary-section\">\r\n        <h3>Zusammenfassung:</h3>\r\n        <p>Der Instruction Pointer ist ein fundamentales Konzept in der Programmausführung und ein wesentlicher Bestandteil der JVM-Architektur. Er steuert den Programmablauf, indem er stets auf die nächste auszuführende Anweisung zeigt. Ohne den Instruction Pointer könnte die JVM keine sequentielle Ausführung von Code oder bedingte Sprünge durchführen.</p>\r\n      </div>\r\n    </div>\r\n  </TheoryLayout>\r\n</template>\r\n\r\n<script>\r\nimport TheoryLayout from './TheoryLayout.vue';\r\n\r\nexport default {\r\n  name: 'InstructionPointerTheory',\r\n  components: {\r\n    TheoryLayout\r\n  },\r\n  mounted() {\r\n    // Hier können spezifische JavaScript-Funktionalitäten für diese Komponente initialisiert werden\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.theory-content h2 {\r\n  color: #2c3e50;\r\n  margin-top: 1.75rem;\r\n  font-size: 1.75rem;\r\n  border-left: 5px solid #4361ee;\r\n  padding-left: 1rem;\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.theory-content h3 {\r\n  color: #4361ee;\r\n  margin-top: 1.5rem;\r\n  font-size: 1.4rem;\r\n  border-bottom: 1px solid #e2e8f0;\r\n  padding-bottom: 0.5rem;\r\n}\r\n\r\n.theory-content h4 {\r\n  color: #334155;\r\n  margin-top: 1rem;\r\n  margin-bottom: 0.5rem;\r\n  font-size: 1.2rem;\r\n}\r\n\r\n.theory-content ul, .theory-content ol {\r\n  padding-left: 1.5rem;\r\n  margin: 0.75rem 0;\r\n}\r\n\r\n.theory-content li {\r\n  margin-bottom: 0.25rem;\r\n}\r\n\r\n.compact-list li {\r\n  margin-bottom: 0.2rem;\r\n}\r\n\r\n.theory-content p {\r\n  line-height: 1.6;\r\n  color: #334155;\r\n  margin-bottom: 0.75rem;\r\n}\r\n\r\n/* Style-Übernahme aus TheoryDetail.vue */\r\n.visual-container, .example-box, .important-note, .instruction-animation, .comparison-note, .summary-section {\r\n  margin: 1.25rem 0;\r\n  padding: 0.75rem;\r\n  border: 1px solid #e2e8f0;\r\n  border-radius: 0.5rem;\r\n  background-color: #f8fafc;\r\n  box-shadow: 0 2px 4px rgba(0,0,0,0.05);\r\n}\r\n\r\n.visual-container.compact {\r\n  margin: 1rem 0;\r\n  padding: 0.5rem;\r\n}\r\n\r\n.visual-fallback pre {\r\n  background-color: #f5f5f5;\r\n  padding: 0.75rem;\r\n  border-radius: 0.5rem;\r\n  font-family: monospace;\r\n  overflow-x: auto;\r\n  line-height: 1.2;\r\n  margin: 0.5rem 0;\r\n}\r\n\r\n.code-example {\r\n  background-color: #1e1e3f;\r\n  color: #fff;\r\n  padding: 1rem;\r\n  border-radius: 6px;\r\n  margin: 1rem 0;\r\n  font-family: 'Fira Code', 'Consolas', monospace;\r\n  font-size: 0.92rem;\r\n  line-height: 1.4;\r\n  overflow-x: auto;\r\n  box-shadow: 0 3px 6px rgba(0, 0, 0, 0.1);\r\n  position: relative;\r\n}\r\n\r\n.important-note {\r\n  background-color: #fef2f2;\r\n  border-left: 4px solid #ef4444;\r\n  position: relative;\r\n  padding: 0.75rem 0.75rem 0.75rem 1.5rem;\r\n}\r\n\r\n.comparison-grid {\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr;\r\n  gap: 1rem;\r\n  margin-top: 0.75rem;\r\n}\r\n\r\n.comparison-item {\r\n  background-color: #fff;\r\n  padding: 0.75rem;\r\n  border-radius: 0.5rem;\r\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);\r\n}\r\n\r\n.comparison-item h5 {\r\n  color: #4361ee;\r\n  margin-top: 0;\r\n  margin-bottom: 0.5rem;\r\n  font-size: 1.1rem;\r\n}\r\n\r\n.execution-steps {\r\n  background-color: #f8fafc;\r\n  border: 1px solid #e2e8f0;\r\n  border-radius: 0.5rem;\r\n  padding: 0.5rem 0.75rem;\r\n  margin-top: 0.5rem;\r\n}\r\n\r\n.execution-step {\r\n  display: flex;\r\n  align-items: center;\r\n  margin-bottom: 0.3rem;\r\n  font-family: monospace;\r\n}\r\n\r\n.execution-step:last-child {\r\n  margin-bottom: 0;\r\n}\r\n\r\n.ip-indicator {\r\n  color: #ef4444;\r\n  margin-right: 0.5rem;\r\n  font-weight: bold;\r\n  width: 1rem;\r\n  text-align: center;\r\n}\r\n\r\n.bytecode-execution p {\r\n  margin-bottom: 0.5rem;\r\n}\r\n\r\n.code-with-ip {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 0.75rem;\r\n}\r\n\r\n.theory-image {\r\n  max-width: 100%;\r\n  height: auto;\r\n  display: block;\r\n  margin: 0 auto;\r\n}\r\n\r\n.summary-section {\r\n  background-color: #f0f9ff;\r\n  border-left: 4px solid #38bdf8;\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .comparison-grid {\r\n    grid-template-columns: 1fr;\r\n  }\r\n  \r\n  .theory-content h2 {\r\n    font-size: 1.5rem;\r\n  }\r\n  \r\n  .theory-content h3 {\r\n    font-size: 1.25rem;\r\n  }\r\n  \r\n  .code-example {\r\n    font-size: 0.85rem;\r\n    padding: 0.75rem;\r\n  }\r\n}\r\n\r\n@media (max-width: 576px) {\r\n  .visual-fallback pre {\r\n    font-size: 0.8rem;\r\n    padding: 0.5rem;\r\n  }\r\n  \r\n  .execution-step {\r\n    font-size: 0.85rem;\r\n  }\r\n}\r\n</style>","import { render } from \"./InstructionPointerTheory.vue?vue&type=template&id=2850b6a2&scoped=true\"\nimport script from \"./InstructionPointerTheory.vue?vue&type=script&lang=js\"\nexport * from \"./InstructionPointerTheory.vue?vue&type=script&lang=js\"\n\nimport \"./InstructionPointerTheory.vue?vue&type=style&index=0&id=2850b6a2&scoped=true&lang=css\"\n\nimport exportComponent from \"../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-2850b6a2\"]])\n\nexport default __exports__","import { createRouter, createWebHashHistory } from 'vue-router'\r\nimport MainLayout from '../components/MainLayout.vue'\r\nimport WelcomePage from '../components/WelcomePage.vue'\r\nimport TheoryCards from '../components/TheoryCards.vue'\r\nimport QuizPage from '../components/QuizPage.vue'\r\n\r\n// Direkte Importe der Theorie-Komponenten\r\nimport CallStackTheory from '../components/theory/CallStackTheory.vue'\r\nimport MemoryStackTheory from '../components/theory/MemoryStackTheory.vue'\r\nimport MemoryHeapTheory from '../components/theory/MemoryHeapTheory.vue'\r\nimport MethodAreaTheory from '../components/theory/MethodAreaTheory.vue'\r\nimport StackPointerTheory from '../components/theory/StackPointerTheory.vue'\r\nimport InstructionPointerTheory from '../components/theory/InstructionPointerTheory.vue'\r\n\r\nconst routes = [\r\n  {\r\n    path: '/',\r\n    name: 'welcome',\r\n    component: WelcomePage\r\n  },\r\n  {\r\n    path: '/visualizer',\r\n    name: 'visualizer',\r\n    component: MainLayout\r\n  },\r\n  {\r\n    path: '/theory',\r\n    name: 'theory',\r\n    component: TheoryCards\r\n  },\r\n  // Direkte Routen zu den einzelnen Theorie-Komponenten\r\n  {\r\n    path: '/theory/callstack',\r\n    name: 'theory-callstack',\r\n    component: CallStackTheory\r\n  },\r\n  {\r\n    path: '/theory/memory-stack',\r\n    name: 'theory-memory-stack',\r\n    component: MemoryStackTheory\r\n  },\r\n  {\r\n    path: '/theory/memory-heap',\r\n    name: 'theory-memory-heap',\r\n    component: MemoryHeapTheory\r\n  },\r\n  {\r\n    path: '/theory/method-area',\r\n    name: 'theory-method-area',\r\n    component: MethodAreaTheory\r\n  },\r\n  {\r\n    path: '/theory/stack-pointer',\r\n    name: 'theory-stack-pointer',\r\n    component: StackPointerTheory\r\n  },\r\n  {\r\n    path: '/theory/instruction-pointer',\r\n    name: 'theory-instruction-pointer',\r\n    component: InstructionPointerTheory\r\n  },\r\n  {\r\n    path: '/quiz',\r\n    name: 'quiz',\r\n    component: QuizPage\r\n  }\r\n]\r\n\r\nconst router = createRouter({\r\n  history: createWebHashHistory(),\r\n  routes\r\n})\r\n\r\nexport default router","import { createApp } from 'vue'\r\nimport { createPinia } from 'pinia'\r\nimport App from './App.vue'\r\nimport router from './router'\r\n\r\nconst app = createApp(App)\r\napp.use(createPinia())\r\napp.use(router)\r\napp.mount('#app')","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = function(result, chunkIds, fn, priority) {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t524: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = function(chunkId) { return installedChunks[chunkId] === 0; };\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = function(parentChunkLoadingFunction, data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some(function(id) { return installedChunks[id] !== 0; })) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkjava_speicherverwaltung\"] = self[\"webpackChunkjava_speicherverwaltung\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [504], function() { return __webpack_require__(1691); })\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["class","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_hoisted_3","_createVNode","_component_router_link","to","default","_withCtx","_cache","xmlns","viewBox","width","height","fill","stroke","d","points","_","x","y","rx","ry","x1","y1","x2","y2","cx","cy","r","_hoisted_4","_hoisted_5","_component_router_view","name","__exports__","render","_component_CodeExplorer","_component_MemoryVisualizer","key","_Fragment","_renderList","$setup","codeLines","line","index","_normalizeClass","store","currentLine","nextLineToExecute","_toDisplayString","_hoisted_6","_hoisted_7","onClick","args","previousLine","disabled","canGoBack","_createTextVNode","_hoisted_8","nextLine","reset","useMemoryStore","defineStore","state","stackVariables","heapObjects","stackPointer","history","programCompleted","currentCode","actions","saveState","this","push","JSON","parse","stringify","maxLines","split","length","value","address","type","id","content","size","prevState","pop","emits","setup","props","emit","computed","moved","onMounted","variable","_hoisted_9","_hoisted_10","_hoisted_11","_createCommentVNode","_hoisted_12","_hoisted_13","object","_hoisted_14","_hoisted_15","_hoisted_16","_hoisted_17","_hoisted_18","_hoisted_19","_hoisted_20","_hoisted_21","_hoisted_22","components","CodeExplorer","MemoryVisualizer","_createStaticVNode","src","alt","onError","$options","handleImageError","$data","imageError","startVisualizer","data","methods","$router","theoryCards","card","$event","showTheoryDetail","title","shortDescription","conceptId","quizStarted","quizCompleted","endQuiz","score","answeredQuestions","_hoisted_23","Math","round","_hoisted_24","_hoisted_25","questions","_hoisted_26","_hoisted_27","_hoisted_28","_hoisted_29","_hoisted_30","_hoisted_31","_hoisted_32","restartQuiz","style","_normalizeStyle","progress","currentQuestionIndex","currentQuestion","question","options","option","selectedOption","showAnswer","correctAnswer","selectOption","isCorrect","explanation","nextQuestion","checkAnswer","startQuiz","originalQuestions","created","shuffleQuestions","shuffled","i","j","floor","random","_createBlock","_component_TheoryLayout","currentStep","_TransitionGroup","getConsoleOutput","prevStep","totalSteps","nextStep","getStepDescription","goBack","$props","_renderSlot","_ctx","$slots","String","required","TheoryLayout","consoleOutputs","stepDescriptions","min","mounted","onerror","routes","path","component","WelcomePage","MainLayout","TheoryCards","CallStackTheory","MemoryStackTheory","MemoryHeapTheory","MethodAreaTheory","StackPointerTheory","InstructionPointerTheory","QuizPage","router","createRouter","createWebHashHistory","app","createApp","App","use","createPinia","mount","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","call","m","deferred","O","result","chunkIds","fn","priority","notFulfilled","Infinity","fulfilled","Object","keys","every","splice","n","getter","__esModule","a","definition","o","defineProperty","enumerable","get","g","globalThis","Function","e","window","obj","prop","prototype","hasOwnProperty","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","some","chunkLoadingGlobal","self","forEach","bind","__webpack_exports__"],"sourceRoot":""}